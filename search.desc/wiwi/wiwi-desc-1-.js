searchState.loadedDescShard("wiwi", 1, "Objects that have a notion of <em>successor</em> and <em>predecessor</em> …\nAn iterator for stepping iterators by a custom amount.\nA new iterator where each successive item is computed …\nTrait to represent types that can be created by summing up …\nAn iterator that only iterates over the first <code>n</code> iterations …\nAn iterator that only accepts elements while <code>predicate</code> …\nAn iterator that reports an accurate length using …\nA type that upholds all invariants of <code>Step</code>.\nAn iterator that iterates two other iterators …\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nTests if every element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nReturns an iterator over <code>N</code> elements of the iterator at a …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nBorrows an iterator, rather than consuming it.\nConverts the arguments to iterators and links them …\nTakes two iterators and creates a new iterator over both …\nCreates an iterator which <code>clone</code>s all of its elements.\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nTransforms an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCreates an iterator which copies all of its elements.\nConsumes the iterator, counting the number of iterations …\nRepeats an iterator endlessly.\nCreates a <code>Flatten</code> iterator from the default value of <code>I</code>.\nCreates a <code>Chain</code> from the default values for <code>A</code> and <code>B</code>.\nCreates a <code>Cloned</code> iterator from the default value of <code>I</code>\nCreates a <code>Copied</code> iterator from the default value of <code>I</code>\nCreates an <code>Enumerate</code> iterator from the default value of <code>I</code>\nCreates a <code>Fuse</code> iterator from the default value of <code>I</code>.\nCreates a <code>Rev</code> iterator from the default value of <code>I</code>\nCreates an iterator that yields nothing.\nCreates an iterator which gives the current iteration …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nExtends a collection with the contents of an iterator.\nExtends a collection with exactly one element.\nReserves capacity in a collection for the given number of …\nCreates an iterator which uses a closure to determine if …\nCreates an iterator that both filters and maps.\nSearches for an element of an iterator that satisfies a …\nApplies function to the elements of iterator and returns …\nCreates an iterator that works like map, but flattens …\nCreates an iterator that flattens nested structure.\nFolds every element into an accumulator by applying an …\nCalls a closure on each element of an iterator.\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new iterator where each iteration calls the …\nCreates a new iterator where each iteration calls the …\nCreates a value from an iterator.\nCreates an iterator which ends after the first <code>None</code>.\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nDoes something with each element of an iterator, passing …\nCreates a new iterator which places a copy of <code>separator</code> …\nCreates a new iterator which places an item generated by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an iterator from a value.\nReturns an iterator over the remaining elements of the …\nReturns <code>true</code> if the iterator is empty.\nChecks if the elements of this iterator are partitioned …\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted using …\nChecks if the elements of this iterator are sorted using …\nConsumes the iterator, returning the last element.\nDetermines if the elements of this <code>Iterator</code> are …\nReturns the exact remaining length of the iterator.\nDetermines if the elements of this <code>Iterator</code> are …\nTakes a closure and creates an iterator which calls that …\nCreates an iterator that both yields elements based on a …\nCalls the given function <code>f</code> for each contiguous window of …\nReturns the maximum element of an iterator.\nReturns the element that gives the maximum value with …\nReturns the element that gives the maximum value from the …\nReturns the minimum element of an iterator.\nReturns the element that gives the minimum value with …\nReturns the element that gives the minimum value from the …\nDetermines if the elements of this <code>Iterator</code> are not equal …\nAdvances the iterator and returns the next value.\nOverflow Behavior\nRemoves and returns an element from the end of the …\nAdvances the iterator and returns an array containing the …\nConsume and return the next value of this iterator if a …\nConsume and return the next item if it is equal to <code>expected</code>…\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nCreates an iterator that yields an element exactly once.\nCreates an iterator that lazily generates a value exactly …\nLexicographically compares the <code>PartialOrd</code> elements of this …\nLexicographically compares the elements of this <code>Iterator</code> …\nConsumes an iterator, creating two collections from it.\nReorders the elements of this iterator <em>in-place</em> according …\nReturns a reference to the next() value without advancing …\nReturns a mutable reference to the next() value without …\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …\nSearches for an element in an iterator, returning its …\nTakes an iterator and generates <code>Self</code> from the elements by …\nIterates over the entire iterator, multiplying all the …\nReduces the elements to a single one, by repeatedly …\nCreates a new iterator that endlessly repeats a single …\nCreates a new iterator that repeats a single element a …\nCreates a new iterator that repeats elements of type <code>A</code> …\nReverses an iterator’s direction.\nSearches for an element of an iterator from the back that …\nAn iterator method that reduces the iterator’s elements …\nSearches for an element in an iterator from the right, …\nAn iterator adapter which, like <code>fold</code>, holds internal …\nReturns the bounds on the remaining length of the iterator.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that <code>skip</code>s elements based on a …\nCreates an iterator starting at the same point, but …\nReturns the number of <em>successor</em> steps required to get from …\nCreates a new iterator where each successive item is …\nTakes an iterator and generates <code>Self</code> from the elements by …\nSums the elements of an iterator.\nCreates an iterator that yields the first <code>n</code> elements, or …\nCreates an iterator that yields elements based on a …\nFallibly transforms an iterator into a collection, short …\nApplies function to the elements of iterator and returns …\nAn iterator method that applies a function as long as it …\nAn iterator method that applies a fallible function to …\nReduces the elements to a single one by repeatedly …\nThis is the reverse version of <code>Iterator::try_fold()</code>: it …\nConverts an iterator of pairs into a pair of containers.\nConverts the arguments to iterators and zips them.\n‘Zips up’ two iterators into a single iterator of …\nDerive macro generating impls of traits related to smart …\nDerive macro generating an impl of the trait <code>ConstParamTy</code>.\nA marker for types which can be used as types of <code>const</code> …\nTypes whose values can be duplicated simply by copying …\nDerive macro generating an impl of the trait <code>Copy</code>.\nA marker for types that can be dropped.\nThe type of the discriminant, which must satisfy the trait …\nCompiler-internal trait used to indicate the type of enum …\nA common trait implemented by all function pointers.\nUsed to determine whether a type contains any <code>UnsafeCell</code> …\nZero-sized type used to mark things that “act like” …\nA marker type which does not implement <code>Unpin</code>.\nA marker for pointer-like types.\nTypes that can be transferred across thread boundaries.\nTypes with a constant size known at compile time.\nRequired trait for constants used in pattern matches.\nTypes for which it is safe to share references between …\nA marker for tuple types.\nTypes that do not require any pinning guarantees.\nTypes that can be “unsized” to a dynamically-sized …\nA marker for types which can be used as types of <code>const</code> …\nDerive macro generating an impl of the trait <code>ConstParamTy</code>.\nReturns the address of the function pointer.\nWith this, <code>TransmuteFrom</code> assumes only that you have …\nConfigurable proof assumptions of <code>TransmuteFrom</code>.\nOpaque type representing the discriminant of an enum.\nWith this, <code>TransmuteFrom</code> assumes only that you have …\nA wrapper to inhibit the compiler from automatically …\nA wrapper type to construct uninitialized instances of <code>T</code>.\nWith this, <code>TransmuteFrom</code> does not assume you have ensured …\nWith this, <code>TransmuteFrom</code> assumes only that you have …\nMarks that <code>Src</code> is transmutable into <code>Self</code>.\nWith this, <code>TransmuteFrom</code> assumes only that you have …\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nReturns the ABI-required minimum alignment of the type of …\nWhen <code>false</code>, <code>TransmuteFrom</code> is not implemented for …\nCombine the assumptions of <code>self</code> and <code>other_assumptions</code>.\nRemove <code>other_assumptions</code> the obligations of <code>self</code>; e.g.:\nBitwise-copies a value.\nReturns a value uniquely identifying the enum variant in <code>v</code>.\nDisposes of a value.\nTakes ownership and “forgets” about the value <strong>without </strong>…\nLike <code>forget</code>, but also accepts unsized values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhen <code>false</code>, <code>TransmuteFrom</code> is not implemented for …\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nReturns <code>true</code> if dropping values of type <code>T</code> matters.\nExpands to the offset in bytes of a field from the …\nMoves <code>src</code> into the referenced <code>dest</code>, returning the previous …\nWhen <code>false</code>, <code>TransmuteFrom</code> is not implemented for …\nReturns the size of a type in bytes.\nReturns the size of the pointed-to value in bytes.\nReturns the size of the pointed-to value in bytes.\nSwaps the values at two mutable locations, without …\nReplaces <code>dest</code> with the default value of <code>T</code>, returning the …\nReinterprets the bits of a value of one type as another …\nTransmutes a <code>Src</code> value into a <code>Self</code>.\nInterprets <code>src</code> as having type <code>&amp;Dst</code>, and then reads <code>src</code> …\nBypasses Rust’s normal memory-initialization checks by …\nWhen <code>false</code>, <code>TransmuteFrom</code> is not implemented for …\nReturns the number of variants in the enum type <code>T</code>.\nReturns the value of type <code>T</code> represented by the all-zero …\nThe addition operator <code>+</code>.\nThe addition assignment operator <code>+=</code>.\nAn async-aware version of the <code>Fn</code> trait.\nAn async-aware version of the <code>FnMut</code> trait.\nAn async-aware version of the <code>FnOnce</code> trait.\nThe bitwise AND operator <code>&amp;</code>.\nThe bitwise AND assignment operator <code>&amp;=</code>.\nThe bitwise OR operator <code>|</code>.\nThe bitwise OR assignment operator <code>|=</code>.\nThe bitwise XOR operator <code>^</code>.\nThe bitwise XOR assignment operator <code>^=</code>.\nAn endpoint of a range of keys.\nExit the operation without running subsequent phases.\nFuture returned by <code>AsyncFnOnce::async_call_once</code>.\nFuture returned by <code>AsyncFnMut::async_call_mut</code> and …\nTrait that indicates that this is a pointer or a wrapper …\nThe coroutine completed with a return value.\nMove on to the next phase of the operation as normal.\nUsed to tell an operation whether it should exit early or …\nThe trait implemented by builtin coroutine types.\nThe result of a coroutine resumption.\nUsed for immutable dereferencing operations, like <code>*v</code>.\nUsed for mutable dereferencing operations, like in <code>*v = 1;</code>.\nPerma-unstable marker trait. Indicates that the type has a …\n<code>DispatchFromDyn</code> is used in the implementation of …\nThe division operator <code>/</code>.\nThe division assignment operator <code>/=</code>.\nCustom code within the destructor.\nAn exclusive bound.\nThe version of the call operator that takes an immutable …\nThe version of the call operator that takes a mutable …\nThe version of the call operator that takes a by-value …\nUsed to specify which residuals can be converted into …\nAn inclusive bound.\nUsed for indexing operations (<code>container[index]</code>) in …\nUsed for indexing operations (<code>container[index]</code>) in mutable …\nThe multiplication operator <code>*</code>.\nThe multiplication assignment operator <code>*=</code>.\nThe unary negation operator <code>-</code>.\nThe unary logical negation operator <code>!</code>.\n<code>OneSidedRange</code> is implemented for built-in range types that …\nThe resulting type after applying the <code>+</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nOutput type of the called closure’s future.\nThe resulting type after applying the <code>!</code> operator.\nThe returned type after the call operator is used.\nThe type of the value produced by <code>?</code> when <em>not</em> …\nThe resulting type after applying the <code>*</code> operator.\nThe resulting type after applying the <code>/</code> operator.\nThe resulting type after applying the <code>%</code> operator.\nThe resulting type after applying the <code>&amp;</code> operator.\nThe resulting type after applying the <code>|</code> operator.\nThe resulting type after applying the <code>^</code> operator.\nThe resulting type after applying the <code>&lt;&lt;</code> operator.\nThe resulting type after applying the <code>&gt;&gt;</code> operator.\nThe returned type after indexing.\nA (half-open) range bounded inclusively below and …\n<code>RangeBounds</code> is implemented by Rust’s built-in range …\nA range only bounded inclusively below (<code>start..</code>).\nAn unbounded range (<code>..</code>).\nA range bounded inclusively below and above (<code>start..=end</code>).\nA range only bounded exclusively above (<code>..end</code>).\nA range only bounded inclusively above (<code>..=end</code>).\nThe remainder operator <code>%</code>.\nThe remainder assignment operator <code>%=</code>.\nAllows retrieving the canonical type implementing <code>Try</code> that …\nThe type of the value passed to <code>FromResidual::from_residual</code>\nThe type of value this coroutine returns.\nThe left shift operator <code>&lt;&lt;</code>. Note that because this trait …\nThe left shift assignment operator <code>&lt;&lt;=</code>.\nThe right shift operator <code>&gt;&gt;</code>. Note that because this trait …\nThe right shift assignment operator <code>&gt;&gt;=</code>.\nThe subtraction operator <code>-</code>.\nThe subtraction assignment operator <code>-=</code>.\nThe resulting type after dereferencing.\nThe <code>?</code> operator and <code>try {}</code> blocks.\nThe “return” type of this meta-function.\nAn infinite endpoint. Indicates that there is no bound in …\nImplement <code>FromResidual&lt;Yeet&lt;T&gt;&gt;</code> on your type to enable …\nThe type of value this coroutine yields.\nThe coroutine suspended with a value.\nPerforms the <code>+</code> operation.\nPerforms the <code>+=</code> operation.\nConverts from <code>&amp;mut Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;mut T&gt;</code>.\nConverts from <code>&amp;Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;T&gt;</code>.\nCall the <code>AsyncFn</code>, returning a future which may borrow from …\nCall the <code>AsyncFnMut</code>, returning a future which may borrow …\nCall the <code>AsyncFnOnce</code>, returning a future which may move …\nPerforms the <code>&amp;</code> operation.\nPerforms the <code>&amp;=</code> operation.\nPerforms the <code>|</code> operation.\nPerforms the <code>|=</code> operation.\nPerforms the <code>^</code> operation.\nPerforms the <code>^=</code> operation.\nUsed in <code>?</code> to decide whether the operator should produce a …\nConverts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …\nPerforms the call operation.\nPerforms the call operation.\nPerforms the call operation.\nMap a <code>Bound&lt;&amp;T&gt;</code> to a <code>Bound&lt;T&gt;</code> by cloning the contents of …\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nConverts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …\nDereferences the value.\nMutably dereferences the value.\nPerforms the <code>/</code> operation.\nPerforms the <code>/=</code> operation.\nExecutes the destructor for this type.\nReturns the upper bound of the range (inclusive).\nThe upper bound of the range (exclusive).\nThe upper bound of the range (exclusive).\nThe upper bound of the range (inclusive)\nEnd index bound.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs the type from its <code>Output</code> type.\nConstructs the type from a compatible <code>Residual</code> type.\nPerforms the indexing (<code>container[index]</code>) operation.\nPerforms the mutable indexing (<code>container[index]</code>) operation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDestructures the <code>RangeInclusive</code> into (lower bound, upper …\nReturns <code>true</code> if this is a <code>Break</code> variant.\nReturns <code>true</code> if this is a <code>Continue</code> variant.\nReturns <code>true</code> if the range contains no items.\nReturns <code>true</code> if the range contains no items.\nMaps a <code>Bound&lt;T&gt;</code> to a <code>Bound&lt;U&gt;</code> by applying a function to …\nMaps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;T, C&gt;</code> by applying a …\nMaps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;B, T&gt;</code> by applying a …\nPerforms the <code>*</code> operation.\nPerforms the <code>*=</code> operation.\nPerforms the unary <code>-</code> operation.\nCreates a new inclusive range. Equivalent to writing …\nPerforms the unary <code>!</code> operation.\nPerforms the <code>%</code> operation.\nPerforms the <code>%=</code> operation.\nResumes the execution of this coroutine.\nPerforms the <code>&lt;&lt;</code> operation.\nPerforms the <code>&lt;&lt;=</code> operation.\nPerforms the <code>&gt;&gt;</code> operation.\nPerforms the <code>&gt;&gt;=</code> operation.\nReturns the lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nStart index bound.\nPerforms the <code>-</code> operation.\nPerforms the <code>-=</code> operation.\nAn iterator over the value in <code>Some</code> variant of an <code>Option</code>.\nAn iterator over a reference to the <code>Some</code> variant of an …\nAn iterator over a mutable reference to the <code>Some</code> variant …\nNo value.\nThe <code>Option</code> type. See the module level documentation for …\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA simple wrapper around a type to assert that it is unwind …\nThe configuration for whether and how the default panic …\nPrints a backtrace with all possible information.\nA struct containing information about the location of a …\nDisable collecting and displaying backtraces.\nA struct providing information about a panic.\nA struct providing information about a panic.\nA marker trait representing types where a shared reference …\nPrints a terser backtrace which ideally only contains …\nA marker trait which represents “panic safe” types in …\nInvokes a closure, aborting if the closure unwinds.\nMakes all future panics abort directly without running the …\nReturns the source location of the caller of this …\nReturns whether the panic handler is allowed to unwind the …\nInvokes a closure, capturing the cause of an unwinding …\nReturns the column from which the panic originated.\nReturns the name of the source file from which the panic …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecks whether the standard library’s panic hook will …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the line number from which the panic originated.\nReturns information about the location from which the …\nPanics the current thread with the given message as the …\nReturns the payload associated with the panic.\nReturns the payload associated with the panic, if it is a …\nTriggers a panic without invoking the panic hook.\nConfigures whether the default panic hook will capture and …\nRegisters a custom panic hook, replacing the previously …\nUnregisters the current panic hook and returns it, …\nAtomic combination of <code>take_hook</code> and <code>set_hook</code>. Use this to …\nAn iterator over <code>Path</code> and its ancestors.\nA single component of a path.\nAn iterator over the <code>Component</code>s of a <code>Path</code>.\nA reference to the current directory, i.e., <code>.</code>.\nDevice namespace prefix, e.g., <code>\\\\.\\COM42</code>.\nPrefix <code>C:</code> for the given disk drive.\nHelper struct for safely printing paths with <code>format!</code> and <code>{}</code>…\nAn iterator over the <code>Component</code>s of a <code>Path</code>, as <code>OsStr</code> slices.\nThe primary separator of path components for the current …\nThe primary separator of path components for the current …\nA normal component, e.g., <code>a</code> and <code>b</code> in <code>a/b</code>.\nA reference to the parent directory, i.e., <code>..</code>.\nA slice of a path (akin to <code>str</code>).\nAn owned, mutable path (akin to <code>String</code>).\nWindows path prefixes, e.g., <code>C:</code> or <code>\\\\server\\share</code>.\nA Windows path prefix, e.g., <code>C:</code> or <code>\\\\server\\share</code>.\nA structure wrapping a Windows path prefix as well as its …\nThe root directory component, appears after any prefix and …\nAn error returned from <code>Path::strip_prefix</code> if the prefix …\nPrefix using Windows’ <em><strong>U</strong>niform <strong>N</strong>aming <strong>C</strong>onvention</em>, e.g. …\nVerbatim prefix, e.g., <code>\\\\?\\cat_pics</code>.\nVerbatim disk prefix, e.g., <code>\\\\?\\C:</code>.\nVerbatim prefix using Windows’ <em><strong>U</strong>niform <strong>N</strong>aming <strong>C</strong>onvention</em>,\nMakes the path absolute without accessing the filesystem.\nReturns the raw <code>OsStr</code> slice for this prefix.\nExtracts the underlying <code>OsStr</code> slice.\nExtracts a slice corresponding to the portion of the path …\nExtracts a slice corresponding to the portion of the path …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether the character is one of the permitted …\nDetermines if the prefix is verbatim, i.e., begins with …\nReturns the parsed prefix data.\nA type storing a <code>usize</code> which is a power of two, and thus …\nThe metadata for a <code>Dyn = dyn SomeTrait</code> trait object type.\nThe smallest possible alignment, 1.\nThe type for metadata in pointers and references to <code>Self</code>.\n<code>*mut T</code> but non-zero and covariant.\nProvides the pointer metadata type of any pointed-to type.\nAdds an offset to a pointer (convenience for …\nGets the “address” portion of the pointer.\nCompares the <em>addresses</em> of the two pointers for equality, …\nCreates a <code>const</code> raw pointer to a place, without creating …\nCreates a <code>mut</code> raw pointer to a place, without creating an …\nReturns the alignment of the type associated with this …\nComputes the offset that needs to be applied to the …\nReturns a unique reference to the value. If the value may …\nReturns a raw pointer to the slice’s buffer.\nReturns a non-null pointer to the slice’s buffer.\nReturns the alignment as a NonZero&lt;usize&gt;.\nAcquires the underlying <code>*mut</code> pointer.\nReturns a shared reference to the value. If the value may …\nReturns a unique references to the value. In contrast to …\nReturns a shared references to the value. In contrast to …\nReturns a shared reference to a slice of possibly …\nReturns a unique reference to a slice of possibly …\nReturns the alignment as a <code>usize</code>.\nCalculates the offset from a pointer in bytes (convenience …\nCalculates the offset from a pointer in bytes.\nCalculates the distance between two pointers within the …\nCalculates the offset from a pointer in bytes (convenience …\nCalculates the distance between two pointers within the …\nCasts to a pointer of another type.\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …\nCopies <code>count * size_of&lt;T&gt;</code> bytes from <code>src</code> to <code>self</code>. The …\nCopies <code>count * size_of&lt;T&gt;</code> bytes from <code>src</code> to <code>self</code>. The …\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …\nCopies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The …\nCopies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The …\nCreates a new pointer that is dangling, but non-null and …\nCreates a new <code>NonNull</code> that is dangling, but well-aligned.\nCreates a new pointer that is dangling, but non-null and …\nExecutes the destructor (if any) of the pointed-to value.\nExecutes the destructor (if any) of the pointed-to value.\nCompares raw pointers for equality.\nCompares the <em>addresses</em> of the two function pointers for …\nReturns the argument unchanged.\nConverts a <code>&amp;T</code> to a <code>NonNull&lt;T&gt;</code>.\nReturns the argument unchanged.\nConverts a <code>&amp;mut T</code> to a <code>NonNull&lt;T&gt;</code>.\nReturns the argument unchanged.\nConverts a mutable reference to a raw pointer.\nConverts a mutable reference to a <code>NonNull</code> pointer.\nForms a (possibly-wide) raw pointer from a data pointer …\nPerforms the same functionality as <code>std::ptr::from_raw_parts</code>…\nPerforms the same functionality as <code>from_raw_parts</code>, except …\nConverts a reference to a raw pointer.\nConverts a reference to a <code>NonNull</code> pointer.\nReturns a raw pointer to an element or subslice, without …\nHash a raw pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the pointer is properly aligned for <code>T</code>.\nReturns whether the pointer is aligned to <code>align</code>.\nReturns <code>true</code> if the non-null raw slice has a length of 0.\nReturns the size and alignment together as a <code>Layout</code>\nReturns the length of a non-null raw slice.\nReturns the base-2 logarithm of the alignment.\nCreates a new pointer by mapping <code>self</code>’s address to a new …\nReturns a bit mask that can be used to match this …\nExtracts the metadata component of a pointer.\nCreates a new <code>NonNull</code> if <code>ptr</code> is non-null.\nCreates an <code>Alignment</code> from a <code>usize</code>, or returns <code>None</code> if it’…\nCreates a new <code>NonNull</code>.\nCreates an <code>Alignment</code> from a power-of-two <code>usize</code>.\nCreates a null raw pointer.\nCreates a null mutable raw pointer.\nReturns the alignment for a type.\nAdds an offset to a pointer.\nCalculates the distance between two pointers within the …\nReads the value from <code>src</code> without moving it. This leaves the\nReads the value from <code>self</code> without moving it. This leaves …\nReads the value from <code>src</code> without moving it. This leaves the\nReads the value from <code>self</code> without moving it. This leaves …\nPerforms a volatile read of the value from <code>src</code> without …\nPerforms a volatile read of the value from <code>self</code> without …\nMoves <code>src</code> into the pointed <code>dst</code>, returning the previous <code>dst</code> …\nReplaces the value at <code>self</code> with <code>src</code>, returning the old …\nReturns the size of the type associated with this vtable.\nForms a raw slice from a pointer and a length.\nCreates a non-null raw slice from a thin pointer and a …\nForms a raw mutable slice from a pointer and a length.\nSubtracts an offset from a pointer (convenience for …\nCalculates the distance between two pointers within the …\nSwaps the values at two mutable locations of the same …\nSwaps the values at two mutable locations of the same …\nSwaps <code>count * size_of::&lt;T&gt;()</code> bytes between the two regions …\nDecompose a (possibly wide) pointer into its data pointer …\nCreates a new pointer with the given address and the …\nConverts an address back to a pointer, picking up some …\nConverts an address back to a mutable pointer, picking up …\nCreates a pointer with the given address and no provenance.\nCreates a pointer with the given address and no provenance.\nOverwrites a memory location with the given value without …\nOverwrites a memory location with the given value without …\nSets <code>count * size_of::&lt;T&gt;()</code> bytes of memory starting at <code>dst</code>…\nInvokes memset on the specified pointer, setting …\nOverwrites a memory location with the given value without …\nOverwrites a memory location with the given value without …\nPerforms a volatile write of a memory location with the …\nPerforms a volatile write of a memory location with the …\nContains the error value\nAn iterator over the value in a <code>Ok</code> variant of a <code>Result</code>.\nAn iterator over a reference to the <code>Ok</code> variant of a <code>Result</code>.\nAn iterator over a mutable reference to the <code>Ok</code> variant of …\nContains the success value\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator over the bytes of a string slice.\nAn iterator over the <code>char</code>s of a string slice, and their …\nAn iterator over the <code>char</code>s of a string slice.\nAn iterator of <code>u16</code> over the string encoded as UTF-16.\nThe associated error which can be returned from parsing.\nThe return type of <code>str::escape_debug</code>.\nThe return type of <code>str::escape_default</code>.\nThe return type of <code>str::escape_unicode</code>.\nParse a value from a string\nAn iterator over the lines of a string, as string slices.\nCreated with the method <code>lines_any</code>.\nCreated with the method <code>match_indices</code>.\nCreated with the method <code>matches</code>.\nAn error returned when parsing a <code>bool</code> using <code>from_str</code> fails\nCreated with the method <code>rmatch_indices</code>.\nCreated with the method <code>rmatches</code>.\nCreated with the method <code>rsplit</code>.\nCreated with the method <code>rsplitn</code>.\nCreated with the method <code>rsplit_terminator</code>.\nCreated with the method <code>split</code>.\nAn iterator over the non-ASCII-whitespace substrings of a …\nAn iterator over the substrings of a string, terminated by …\nCreated with the method <code>splitn</code>.\nCreated with the method <code>split_terminator</code>.\nAn iterator over the non-whitespace substrings of a string,\nAn item returned by the <code>Utf8Chunks</code> iterator.\nAn iterator used to decode a slice of mostly UTF-8 bytes …\nErrors which can occur when attempting to interpret a …\nViews the underlying data as a subslice of the original …\nViews the underlying data as a subslice of the original …\nProvides more information about the failure:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a boxed slice of bytes to a boxed string slice …\nCreates a <code>&amp;str</code> from a pointer and a length.\nCreates a <code>&amp;mut str</code> from a pointer and a length.\nParses a string <code>s</code> to return a value of this type.\nConverts a slice of bytes to a string slice.\nConverts a mutable slice of bytes to a mutable string …\nConverts a slice of bytes to a string slice without …\nConverts a slice of bytes to a string slice without …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the invalid sequence that caused a failure.\nReturns the byte position of the next character, or the …\nThe string Pattern API.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns the remaining lines of the split string.\nReturns remainder of the split string\nReturns remainder of the split string.\nReturns the next validated UTF-8 substring.\nReturns the index in the given string up to which valid …\nAssociated type for <code>&lt;&amp;[char; N] as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nAssociated type for <code>&lt;[char; N] as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nType returned by char types.\nAssociated type for <code>&lt;F as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nAssociated type for <code>&lt;char as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nAssociated type for <code>&lt;&amp;[char] as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nExpresses that every byte of the haystack has been …\nA marker trait to express that a <code>ReverseSearcher</code> can be …\nExpresses that a match of the pattern has been found at …\nA string pattern.\nExpresses that <code>haystack[a..b]</code> has been rejected as a …\nA reverse searcher for a string pattern.\nResult of calling <code>Searcher::next()</code> or …\nA searcher for a string pattern.\nAssociated searcher for this pattern\nAssociated type for <code>&lt;&amp;str as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nType returned by String and str types.\nResult of calling <code>Pattern::as_utf8_pattern()</code>. Can be used …\nReturns the pattern as utf-8 bytes if possible.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGetter for the underlying string to be searched in\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs the associated searcher from <code>self</code> and the …\nChecks whether the pattern matches anywhere in the haystack\nChecks whether the pattern matches at the front of the …\nChecks whether the pattern matches at the back of the …\nPerforms the next search step starting from the front.\nPerforms the next search step starting from the back.\nFinds the next <code>Match</code> result. See <code>next()</code>.\nFinds the next <code>Match</code> result. See <code>next_back()</code>.\nFinds the next <code>Reject</code> result. See <code>next()</code> and <code>next_match()</code>.\nFinds the next <code>Reject</code> result. See <code>next_back()</code>.\nRemoves the pattern from the front of haystack, if it …\nRemoves the pattern from the back of haystack, if it …\nA draining iterator for <code>String</code>.\nA possible error value when converting a <code>String</code> from a …\nA possible error value when converting a <code>String</code> from a …\nA type alias for <code>Infallible</code>.\nA UTF-8–encoded, growable string.\nA trait for converting a value to a <code>String</code>.\nReturns a slice of <code>u8</code>s bytes that were attempted to …\nReturns the remaining (sub)string of this iterator as a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the bytes that were attempted to convert to a …\nConverts the bytes into a <code>String</code> lossily, substituting …\nConverts the given value to a <code>String</code>.\nFetch a <code>Utf8Error</code> to get more details about the conversion …\nA draining iterator for <code>Vec&lt;T&gt;</code>.\nAn iterator which uses a closure to determine if an …\nAn iterator that moves out of a vector.\nA splicing iterator for <code>Vec</code>.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns the remaining items of this iterator as a mutable …\nReturns the remaining items of this iterator as a slice.\nReturns the remaining items of this iterator as a slice.\nCreates an empty <code>vec::IntoIter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeep unyielded elements in the source <code>Vec</code>.\nTrait for structs that can count references\nReference counted thin pointer, that can hold one sized …\nAtomically counted reference counting thin pointer\nWeak pointer to an atomically counted reference counted …\nAtomically counted reference counting thin pointer to a <code>str</code>…\nWeak pointer to an atomically counted reference counted …\nSingle threaded reference counting thin pointer to a <code>str</code>, …\nWeak pointer to a single threaded reference counted thin …\nSingle threaded reference counting thin pointer\nWeak pointer to a single threaded reference counted thin …\nWeak pointer to a reference counted thin pointer <code>Rc</code>\nGets an immurable reference to the slice stored in the …\nGets an immurable reference to the value stored in the …\nCreates a new strong pointer to the same allocation, …\nCreates a new weak pointer to the same allocation, …\nDecrements the strong count for dropping a reference, …\nDecrements the weak count for dropping a reference, …\n“Downgrades” this pointer, returning a weak pointer …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a reference counter from an array, storing it in …\nCreates a reference counter from a slice, cloning all …\nCreates a reference counter from a slice, copying all …\nCreates a reference counter from a (sized) value, storing …\nCreates a reference counter from a value and an array, …\nCreates a reference counter from a value and a slice, …\nCreates a reference counter from a value and a slice, …\nIncrement the strong count for creation of a new strong …\nIncrements the weak count for creation of a new weak …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new couter with strong and weak count both set to …\nGet the strong reference count\nGets the strong pointer count\nGets the strong pointer count\nIncrement the strong count if it is possible to upgrade a …\n“Upgrades” this pointer, returning a strong pointer <code>Rc</code> …\nGet the weak reference count\nGets the weak pointer count\nGets the weak pointer count\nError type but it’s blank (it will be filled soon™)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn iterator over a slice in (non-overlapping) chunks (<code>N</code> …\nAn iterator over a slice in (non-overlapping) mutable …\nA windowed iterator over a slice in overlapping chunks (<code>N</code> …\nAn iterator over slice in (non-overlapping) chunks …\nAn iterator over slice in (non-overlapping) mutable chunks …\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over a slice in (non-overlapping) mutable …\nHelper trait for <code>[T]::concat</code>.\nAn iterator over the escaped version of a byte slice.\nImmutable slice iterator\nMutable slice iterator.\nHelper trait for <code>[T]::join</code>\nThe resulting type after concatenation\nThe resulting type after concatenation\nThe output type returned by methods.\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over subslices separated by elements that …\nAn iterator over the subslices of the vector which are …\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nTypes with a constant size known at compile time.\nA helper trait used for indexing operations.\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nAn iterator over the mutable subslices of the vector which …\nAn iterator over the mutable subslices of the vector which …\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nAn iterator over overlapping subslices of length <code>size</code>.\nViews the underlying data as a mutable subslice of the …\nViews the underlying data as a subslice of the original …\nViews the underlying data as a subslice of the original …\nReturns a slice which contains items not yet handled by …\nImplementation of <code>[T]::concat</code>\nCreates an empty slice iterator.\nCreates an empty slice iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a reference to T into a slice of length 1 …\nForms a mutable slice from a pointer range.\nForms a slice from a pointer range.\nForms a slice from a pointer and a length.\nPerforms the same functionality as <code>from_raw_parts</code>, except …\nConverts a reference to T into a slice of length 1 …\nReturns a shared reference to the output at this location, …\nReturns a mutable reference to the output at this …\nReturns a pointer to the output at this location, without …\nReturns a mutable pointer to the output at this location, …\nReturns a shared reference to the output at this location, …\nReturns a mutable reference to the output at this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the remainder of the original slice that is not …\nReturns the remainder of the original slice that is not …\nReturns the remainder of the original slice that is not …\nViews the underlying data as a subslice of the original …\nImplementation of <code>[T]::join</code>\nPerforms bounds checking of a range.\nReturns the remainder of the original slice that is not …\nReturns the remainder of the original slice that is not …\nReturns the remainder of the original slice that is not …\nPerforms bounds checking of a range without panicking.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")