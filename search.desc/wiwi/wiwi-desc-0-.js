searchState.loadedDescShard("wiwi", 0, "These docs have been built from commit 57476cd7.\nchangelog \nCompile time checked builder APIs\nUtilities for nominal typing\nDeclare a new nominal type (alias), with the provided …\nDeclare many new nominal types (aliases), in a module\nPrelude exporting types from the Rust standard library (<code>std</code>…\nCreates a <code>VecChain</code> containing the arguments\nUtilities relating to Vault Hunters\nCompile-time known value for if the current type encodes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrait implemented on chains and their inner types, …\nGeneric (works with all types) chaining wrapper\nChaining API to convert any (<code>Sized</code>) type to <code>GenericChain&lt;T&gt;</code>…\nTrait for output locations that can be passed to a chainer\nTakes and moves all elements from another <code>Vec</code> or <code>VecChain</code> …\nAssumes all slots inside the array are initialised …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new vector chain without allocating any capacity\nCreates a new vec chain, and preallocate some memory\nSafety\nSafety\nCreates a <code>VecChain</code> containing the arguments\nTakes a closure that is called, passing in a reference to …\nAn interval tracking clock. Takes a start time, an end …\nTiming information for one tick\n<code>ClockTimer</code> builder structs\nGets a <code>ClockTimer</code> builder\nReturns if this tick was delayed. This tick is considered …\nGet elapsed time since the start of this timer\nGet end time of this timer\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if this tick is past due. This tick is considered …\nGet remaining runtime of this timer\nConvenience function, equivalent to running a …\nGet start time of this timer\nRuns the next tick and returns timing information for it, …\nGet time of this tick\nGet total runtime of this timer, including elapsed time …\nBuilder for <code>ClockTimer</code>.\nIntermediate builder state struct, returned after calling …\nIntermediate builder state struct, returned after calling …\nIntermediate builder state struct, returned after calling …\nBuilds and returns a <code>ClockTimer</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNew builder. You can also obtain a builder through …\nSets a duration to run this ClockTimer for. Internally, …\nSets the end date/time of the ClockTimer. ClockTimer will …\nSets interval to run at, or the time between ticks.\nSets the start date/time of the ClockTimer, or in other …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEncodes the given bytes into a base32 <code>String</code>, as specified …\nEncodes the given bytes into a base32 <code>String</code>, using the …\nErrors that can be encountered on decoding data (encoding …\nInvalid character. Characters are only allowed to be in <code>0-9</code>…\nInvalid length. Length is expected to be a multiple of two\nLength of encoding table (not actually used in …\nEncoding table of lowercased characters, length 16, …\nEncoding table of uppercased characters, length 16, …\nDecodes a slice of hex bytes into a byte vector. This …\nEncodes a slice of bytes into a String, using lowercase …\nEncodes a slice of bytes into a String, using uppercase …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA word in the word table (dereferences to <code>&amp;str</code>)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOne frame of this many bytes (4) from the binary data …\nErrors that can be encountered on decoding data (encoding …\nVarious details about a slice and it’s encoded output …\nOne frame of data contains characters that are too large …\nInvalid character in input data\nInput data has invalid length\nOne frame of this many bytes (5) from the encoded Z85 data …\nTable of length 256, mapping any <code>u8</code> to the value it …\nLength of the decoding table\nTable to map a number 0-84 to a Z85 character.\nLength of the encoding table (ie. number of different …\nDecodes a slice of a Z85 string back into the source bytes\nEncodes a slice of bytes into a Z85 string, adding padding …\nCalculates the values\nThe amount of <em>full</em> frames (eg. amount of full chunks of 4 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe amount of capacity required to fit all the encoded …\nThe amount of remainder bytes, strictly less than 4 (frame …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains previously initialised value\nA lazily initialised data wrapper that initialises itself …\nReturned by <code>LazyWrap::into_inner</code>, containing the …\nValue is not initialised, contains initialisation function.\nRuns initialisation if the value is not initialised yet, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFetch the value if its initialised, or return the …\nEnsures that the value is initialised, then returns the …\nReturns true or false, depending on if the value is …\nCreates a new uninitialised instance that will be …\nExecutes code with cloned values, so the executed code can …\nThe constant memory usage for this type\nThe constant memory usage for this type\nThe constant indirect memory usage for this type, if this …\nThe constant memory usage for this type\nThe constant inline memory usage for this type, if this …\nThe constant memory usage for this type, if this value is …\nCalculates total memory usage, including inline and …\nCalculates indirect memory usage (ex. heap usage of a <code>Vec</code>)\nCalculates inline memory usage (ex. heap usage of a <code>Vec</code>, …\nNominal wrapper struct\nGets a mut reference to the wrapped value\nGets a reference to the wrapped value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUnwraps the nominal struct and returns the value\nConsumes and maps the wrapped value into another value, …\nConsumes and asyncronously maps the wrapped value into …\nMaps the <code>Some</code> value of an <code>Option</code>, wrapping the resulting …\nMaps the <code>Err</code> value of a <code>Result</code>, wrapping the resulting …\nMaps the <code>Ok</code> value of a <code>Result</code>, wrapping the resulting …\nCreates a nominal struct with the given value\nDeclare a new nominal type (alias), with the provided …\nDeclare many new nominal types (aliases), in a module\nTranspose a nominal wrapped <code>Result</code> into a <code>Result</code> of a …\nTranspose a nominal wrapped <code>Option</code> into an <code>Option</code> of a …\nUnwraps and rewraps the value as another nominal type, …\nImplements <code>Endian</code> trait and provides big endian …\nImplements <code>Endian</code> trait and provides little endian …\nImplements <code>Endian</code> trait and provides native endian …\nTrait for number types that can be converted from <code>bool</code>, …\nTrait for number types that can be converted from <code>bool</code>, …\nTrait for number types that can be converted from <code>f32</code>, …\nTrait for number types that can be converted from <code>f32</code>, …\nTrait for number types that can be converted from <code>f64</code>, …\nTrait for number types that can be converted from <code>f64</code>, …\nTrait for number types that can be converted from <code>i128</code>, …\nTrait for number types that can be converted from <code>i128</code>, …\nTrait for number types that can be converted from <code>i16</code>, …\nTrait for number types that can be converted from <code>i16</code>, …\nTrait for number types that can be converted from <code>i32</code>, …\nTrait for number types that can be converted from <code>i32</code>, …\nTrait for number types that can be converted from <code>i64</code>, …\nTrait for number types that can be converted from <code>i64</code>, …\nTrait for number types that can be converted from <code>i8</code>, …\nTrait for number types that can be converted from <code>i8</code>, …\nTrait for number types that can be converted from <code>isize</code>, …\nTrait for number types that can be converted from <code>isize</code>, …\nTrait for number types that can be converted from <code>u128</code>, …\nTrait for number types that can be converted from <code>u128</code>, …\nTrait for number types that can be converted from <code>u16</code>, …\nTrait for number types that can be converted from <code>u16</code>, …\nTrait for number types that can be converted from <code>u32</code>, …\nTrait for number types that can be converted from <code>u32</code>, …\nTrait for number types that can be converted from <code>u64</code>, …\nTrait for number types that can be converted from <code>u64</code>, …\nTrait for number types that can be converted from <code>u8</code>, …\nTrait for number types that can be converted from <code>u8</code>, …\nTrait for number types that can be converted from <code>usize</code>, …\nTrait for number types that can be converted from <code>usize</code>, …\nTrait for number types that can be converted into <code>f32</code>, …\nTrait for number types that can be converted into <code>f32</code>, …\nTrait for number types that can be converted into <code>f64</code>, …\nTrait for number types that can be converted into <code>f64</code>, …\nTrait for number types that can be converted into <code>i128</code>, …\nTrait for number types that can be converted into <code>i128</code>, …\nTrait for number types that can be converted into <code>i16</code>, …\nTrait for number types that can be converted into <code>i16</code>, …\nTrait for number types that can be converted into <code>i32</code>, …\nTrait for number types that can be converted into <code>i32</code>, …\nTrait for number types that can be converted into <code>i64</code>, …\nTrait for number types that can be converted into <code>i64</code>, …\nTrait for number types that can be converted into <code>i8</code>, …\nTrait for number types that can be converted into <code>i8</code>, …\nTrait for number types that can be converted into <code>isize</code>, …\nTrait for number types that can be converted into <code>isize</code>, …\nTrait for number types that can be converted into <code>u128</code>, …\nTrait for number types that can be converted into <code>u128</code>, …\nTrait for number types that can be converted into <code>u16</code>, …\nTrait for number types that can be converted into <code>u16</code>, …\nTrait for number types that can be converted into <code>u32</code>, …\nTrait for number types that can be converted into <code>u32</code>, …\nTrait for number types that can be converted into <code>u64</code>, …\nTrait for number types that can be converted into <code>u64</code>, …\nTrait for number types that can be converted into <code>u8</code>, …\nTrait for number types that can be converted into <code>u8</code>, …\nTrait for number types that can be converted into <code>usize</code>, …\nTrait for number types that can be converted into <code>usize</code>, …\nSafety\nSafety\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>bool</code> value\nConvert from a <code>bool</code> value\nConvert from a <code>f32</code> value\nConvert from a <code>f32</code> value\nConvert from a <code>f64</code> value\nConvert from a <code>f64</code> value\nConvert from a <code>i128</code> value\nConvert from a <code>i128</code> value\nConvert from a <code>i16</code> value\nConvert from a <code>i16</code> value\nConvert from a <code>i32</code> value\nConvert from a <code>i32</code> value\nConvert from a <code>i64</code> value\nConvert from a <code>i64</code> value\nConvert from a <code>i8</code> value\nConvert from a <code>i8</code> value\nConvert from a <code>isize</code> value\nConvert from a <code>isize</code> value\nConvert from a <code>u128</code> value\nConvert from a <code>u128</code> value\nConvert from a <code>u16</code> value\nConvert from a <code>u16</code> value\nConvert from a <code>u32</code> value\nConvert from a <code>u32</code> value\nConvert from a <code>u64</code> value\nConvert from a <code>u64</code> value\nConvert from a <code>u8</code> value\nConvert from a <code>u8</code> value\nConvert from a <code>usize</code> value\nConvert from a <code>usize</code> value\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into a <code>f32</code> value\nConvert into a <code>f32</code> value\nConvert into a <code>f64</code> value\nConvert into a <code>f64</code> value\nConvert into a <code>i128</code> value\nConvert into a <code>i128</code> value\nConvert into a <code>i16</code> value\nConvert into a <code>i16</code> value\nConvert into a <code>i32</code> value\nConvert into a <code>i32</code> value\nConvert into a <code>i64</code> value\nConvert into a <code>i64</code> value\nConvert into a <code>i8</code> value\nConvert into a <code>i8</code> value\nConvert into a <code>isize</code> value\nConvert into a <code>isize</code> value\nConvert into a <code>u128</code> value\nConvert into a <code>u128</code> value\nConvert into a <code>u16</code> value\nConvert into a <code>u16</code> value\nConvert into a <code>u32</code> value\nConvert into a <code>u32</code> value\nConvert into a <code>u64</code> value\nConvert into a <code>u64</code> value\nConvert into a <code>u8</code> value\nConvert into a <code>u8</code> value\nConvert into a <code>usize</code> value\nConvert into a <code>usize</code> value\nSafety\nSafety\nSafety\nContains the error value\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWraps an implementor of <code>Parser</code> and provides an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA trait to emulate dynamic typing.\nA thread-safe reference-counting pointer. ‘Arc’ stands …\n<code>Weak</code> is a version of <code>Arc</code> that holds a non-owning reference …\nUsed to do a cheap mutable-to-mutable reference conversion.\nUsed to do a cheap reference-to-reference conversion.\nA boolean type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nA raw pointer type which can be safely shared between …\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nA trait for borrowing data.\nA trait for mutably borrowing data.\nBorrowed data.\nA pointer type that uniquely owns a heap allocation of …\nA common trait for the ability to explicitly duplicate an …\nDerive macro generating an impl of the trait <code>Clone</code>.\nTypes whose values can be duplicated simply by copying …\nDerive macro generating an impl of the trait <code>Copy</code>.\nA clone-on-write smart pointer.\n<code>?</code> formatting.\nDerive macro generating an impl of the trait <code>Debug</code>.\nA trait for giving a type a useful default value.\nDerive macro generating an impl of the trait <code>Default</code>.\nUsed for immutable dereferencing operations, like <code>*v</code>.\nUsed for mutable dereferencing operations, like in <code>*v = 1;</code>.\nFormat trait for an empty format, <code>{}</code>.\nAn iterator able to yield elements from both ends.\nCustom code within the destructor.\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nContains the error value\nThe type returned in the event of a conversion error.\nThe type returned in the event of a conversion error.\nAn iterator that knows its exact length.\nExtend a collection with the contents of an iterator.\nAn object providing access to an open file on the …\nThe version of the call operator that takes an immutable …\nThe version of the call operator that takes a mutable …\nThe version of the call operator that takes a by-value …\nUsed to do value-to-value conversions while consuming the …\nConversion from an <code>Iterator</code>.\nA future represents an asynchronous computation obtained …\nA hashable type.\nDerive macro generating an impl of the trait <code>Hash</code>.\nA trait for hashing an arbitrary stream of bytes.\nThe error type for errors that can never happen.\nA value-to-value conversion that consumes the input value. …\nConversion into a <code>Future</code>.\nWhich kind of future are we turning this into?\nWhich kind of iterator are we turning this into?\nConversion into an <code>Iterator</code>.\nThe type of the elements being iterated over.\nThe type of the elements being iterated over.\nA trait for dealing with iterators.\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nA wrapper to inhibit the compiler from automatically …\nA wrapper type to construct uninitialized instances of <code>T</code>.\nA value that is known not to equal zero.\nNo value.\nContains the success value\nThe <code>Option</code> type. See the module level documentation for …\nTrait for types that form a total order.\nDerive macro generating an impl of the trait <code>Ord</code>. The …\nThe returned type after the call operator is used.\nThe type of value produced on completion.\nThe output that the future will produce on completion.\nOwned data.\nThe resulting type after obtaining ownership.\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nTrait for types that form a partial order.\nDerive macro generating an impl of the trait <code>PartialOrd</code>. …\nA slice of a path (akin to <code>str</code>).\nAn owned, mutable path (akin to <code>String</code>).\nZero-sized type used to mark things that “act like” …\nA marker type which does not implement <code>Unpin</code>.\nA single-threaded reference-counting pointer. ‘Rc’ …\n<code>Weak</code> is a version of <code>Rc</code> that holds a non-owning reference …\nA marker trait representing types where a shared reference …\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nProvides intentionally-saturating arithmetic on <code>T</code>.\nTypes that can be transferred across thread boundaries.\nTypes with a constant size known at compile time.\nSome value of type <code>T</code>.\nA UTF-8–encoded, growable string.\nTypes for which it is safe to share references between …\nThe resulting type after dereferencing.\nA generalization of <code>Clone</code> to borrowed data.\nA trait for converting a value to a <code>String</code>.\nSimple and safe type conversions that may fail in a …\nAn attempted conversion that consumes <code>self</code>, which may or …\nA <code>TypeId</code> represents a globally unique identifier for a …\nTypes that do not require any pinning guarantees.\nThe core primitive for interior mutability in Rust.\nA marker trait which represents “panic safe” types in …\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nProvides intentionally-wrapped arithmetic on <code>T</code>.\nComputes the absolute value of self. See <code>i128::abs</code> for …\nComputes the absolute value of self. See <code>i64::abs</code> for …\nComputes the absolute value of self. See <code>i16::abs</code> for …\nComputes the absolute value of self. See <code>i32::abs</code> for …\nComputes the absolute value of self. See <code>isize::abs</code> for …\nComputes the absolute value of self. See <code>i8::abs</code> for …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nComputes the absolute value of <code>self</code>, wrapping around at …\nComputes the absolute value of <code>self</code>, wrapping around at …\nComputes the absolute value of <code>self</code>, wrapping around at …\nComputes the absolute value of <code>self</code>, wrapping around at …\nComputes the absolute value of <code>self</code>, wrapping around at …\nComputes the absolute value of <code>self</code>, wrapping around at …\nAppend <code>self.extension</code> with <code>extension</code>.\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nTests if every element of the iterator matches a predicate.\nAllocates memory with the global allocator.\nMemory allocation APIs.\nAllocates zero-initialized memory with the global …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nProduces an iterator over <code>Path</code> and its ancestors.\nReturns <code>None</code> if the option is <code>None</code>, otherwise returns <code>optb</code>.\nReturns <code>res</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …\nReturns <code>None</code> if the option is <code>None</code>, otherwise calls <code>f</code> with …\nCalls <code>op</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …\nTests if any element of the iterator matches a predicate.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nUtilities for the array primitive type.\nExtracts the values from an array of <code>MaybeUninit</code> …\nReturns an iterator over <code>N</code> elements of the iterator at a …\nReturns a byte slice of this <code>String</code>’s contents.\nReturns the contents of this <code>MaybeUninit</code> as a slice of …\nReturns the contents of this <code>MaybeUninit</code> as a mutable …\nConverts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to …\nConverts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;Result&lt;T, E&gt;</code>) to …\nConverts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to …\nConverts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;mut Result&lt;T, E&gt;</code>) to …\nConverts this type into a mutable reference of the …\nConverts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.\nConverts from <code>&amp;mut Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;mut T, &amp;mut E&gt;</code>.\nYields a mutable reference to the underlying <code>OsStr</code> slice.\nYields a mutable reference to the underlying <code>OsString</code> …\nReturns a raw mutable pointer to the <code>Box</code>’s contents.\nReturns a raw mutable pointer to the vector’s buffer, or …\nGets a mutable pointer to the contained value. Reading …\nExtracts a mutable slice of the entire vector.\nReturns a mutable slice of the contained value, if any. If …\nConverts a <code>String</code> into a mutable string slice.\nReturns a mutable reference to the contents of this <code>String</code>.\nReturns a <code>NonNull</code> pointer to the vector’s buffer, or a …\nYields the underlying <code>OsStr</code> slice.\nCoerces to a <code>Path</code> slice.\nConverts from Pin&lt;&amp;mut Option&lt;T&gt;&gt; to Option&lt;Pin&lt;&amp;mut T&gt;&gt;.\nConverts from Pin&lt;&amp;Option&lt;T&gt;&gt; to Option&lt;Pin&lt;&amp;T&gt;&gt;.\nReturns a raw pointer to the <code>Box</code>’s contents.\nProvides a raw pointer to the data.\nReturns a raw pointer to the object <code>T</code> pointed to by this …\nProvides a raw pointer to the data.\nReturns a raw pointer to the object <code>T</code> pointed to by this …\nReturns a raw pointer to the vector’s buffer, or a …\nReturns a mutable pointer to the underlying <code>bool</code>.\nReturns a mutable pointer to the underlying pointer.\nGets a pointer to the contained value. Reading from this …\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nConverts this type into a shared reference of the (usually …\nConverts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.\nConverts from <code>&amp;Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;T, &amp;E&gt;</code>.\nExtracts a slice containing the entire vector.\nReturns a slice of the contained value, if any. If this is …\nExtracts a string slice containing the entire <code>String</code>.\nAsserts that a boolean expression is <code>true</code> at runtime.\nAsserts that two expressions are equal to each other …\nAsserts that two expressions are not equal to each other …\nConverts to <code>Box&lt;T, A&gt;</code>.\nConverts to <code>Box&lt;[T], A&gt;</code>.\nConverts to <code>Rc&lt;T&gt;</code>.\nConverts to <code>Rc&lt;[T]&gt;</code>.\nConverts to <code>Arc&lt;[T]&gt;</code>.\nConverts to <code>Arc&lt;T&gt;</code>.\nExtracts the value from the <code>MaybeUninit&lt;T&gt;</code> container. This …\nDrops the contained value in place.\nGets a mutable (unique) reference to the contained value.\nReads the value from the <code>MaybeUninit&lt;T&gt;</code> container. The …\nGets a shared reference to the contained value.\nAtomic types\nImmutably borrows from an owned value.\nMutably borrows from an owned value.\nBorrows an iterator, rather than consuming it.\nPerforms the call operation.\nPerforms the call operation.\nPerforms the call operation.\nReturns the canonical, absolute form of the path with all …\nInvokes <code>capacity</code> on the underlying instance of <code>OsString</code>.\nReturns the total number of elements the vector can hold …\nReturns this <code>String</code>’s capacity, in bytes.\nShareable mutable containers.\nEvaluates boolean combinations of configuration flags at …\nTakes two iterators and creates a new iterator over both …\nChecked absolute value. Checks for overflow and returns …\nChecked absolute value. Checks for overflow and returns …\nChecked absolute value. Checks for overflow and returns …\nChecked absolute value. Checks for overflow and returns …\nChecked absolute value. Checks for overflow and returns …\nChecked absolute value. Checks for overflow and returns …\nAdds an unsigned integer to a non-zero value. Checks for …\nAdds an unsigned integer to a non-zero value. Checks for …\nAdds an unsigned integer to a non-zero value. Checks for …\nAdds an unsigned integer to a non-zero value. Checks for …\nAdds an unsigned integer to a non-zero value. Checks for …\nAdds an unsigned integer to a non-zero value. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRestrict a value to a certain interval.\nInvokes <code>clear</code> on the underlying instance of <code>OsString</code>.\nClears the vector, removing all values.\nTruncates this <code>String</code>, removing all contents.\nThe <code>Clone</code> trait for types that cannot be ‘implicitly …\nReturns a copy of the value.\nReturns a new box with a <code>clone()</code> of this box’s contents.\nMakes a clone of the <code>Rc</code> pointer.\nMakes a clone of the <code>Weak</code> pointer that points to the same …\nMakes a clone of the <code>Arc</code> pointer.\nMakes a clone of the <code>Weak</code> pointer that points to the same …\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nPerforms copy-assignment from <code>source</code>.\nClones the contents of <code>source</code> into <code>self</code>.\nOverwrites the contents of <code>self</code> with a clone of the …\nClones the contents of <code>source</code> into <code>self</code>.\nClones the elements from <code>src</code> to <code>this</code>, returning a mutable …\nUses borrowed data to replace owned data, usually by …\nCreates an iterator which <code>clone</code>s all of its elements.\nMaps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the contents …\nMaps an <code>Option&lt;&amp;mut T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the …\nMaps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …\nMaps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …\nUtilities for comparing and ordering values.\nThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nComparison for two <code>Rc</code>s.\nComparison for two <code>Arc</code>s.\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nTransforms an iterator into a collection.\nCollects all the items from an iterator into a collection.\nExpands to the column number at which it was invoked.\nStores a value into the <code>bool</code> if the current value is the …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the <code>bool</code> if the current value is the …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the <code>bool</code> if the current value is the …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nCauses compilation to fail with the given error message …\nA “compiler-only” atomic fence.\nProduces an iterator over the <code>Component</code>s of the path.\nConcatenates literals into a static string slice.\nCreates an iterator which copies all of its elements.\nMaps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by copying the contents …\nMaps an <code>Option&lt;&amp;mut T&gt;</code> to an <code>Option&lt;T&gt;</code> by copying the …\nMaps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …\nMaps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …\nCopies the elements from <code>src</code> to <code>this</code>, returning a mutable …\nConsumes the iterator, counting the number of iterations …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nOpens a file in write-only mode.\nOpens a file in write-only mode with buffering.\nCreates a new file in read-write mode; error if the file …\nRepeats an iterator endlessly.\nPrints and returns the value of a given expression for …\nDeallocates memory with the global allocator.\nAsserts that a boolean expression is <code>true</code> at runtime.\nAsserts that two expressions are equal to each other.\nAsserts that two expressions are not equal to each other.\nDecrements the strong reference count on the <code>Rc&lt;T&gt;</code> …\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nDecrements the strong reference count on the <code>Rc&lt;T&gt;</code> …\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nRemoves consecutive repeated elements in the vector …\nRemoves all but the first of consecutive elements in the …\nRemoves all but the first of consecutive elements in the …\nReturns the “default value” for a type.\nCreates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.\nCreates an owned Cow&lt;’a, B&gt; with the default value for …\nCreates an <code>UnsafeCell</code>, with the <code>Default</code> value for T.\nCreates an empty str inside an Rc\nCreates a new <code>Rc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.\nCreates an empty <code>[T]</code> inside an Rc\nCreates an empty CStr inside an Rc\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …\nCreates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.\nCreates an empty <code>[T]</code> inside an Arc\nCreates an empty CStr inside an Arc\nCreates an empty str inside an Arc\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating memory. …\nCreates an empty <code>Vec&lt;T&gt;</code>.\nCreates an empty <code>String</code>.\nCreates an <code>AtomicBool</code> initialized to <code>false</code>.\nCreates a null <code>AtomicPtr&lt;T&gt;</code>.\nReturns <code>None</code>.\nDereferences the value.\nMutably dereferences the value.\nReturns an object that implements <code>Display</code> for safely …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the <code>Rc&lt;dyn Any&gt;</code> to a concrete type.\nAttempts to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …\nForwards to the method defined on the type <code>Any</code>.\nReturns some mutable reference to the inner value if it is …\nForwards to the method defined on the type <code>dyn Any</code>.\nForwards to the method defined on the type <code>Any</code>.\nForwards to the method defined on the type <code>dyn Any</code>.\nReturns a mutable reference to the inner value as type …\nForwards to the method defined on the type <code>dyn Any</code>.\nForwards to the method defined on the type <code>Any</code>.\nReturns some reference to the inner value if it is of type …\nForwards to the method defined on the type <code>Any</code>.\nForwards to the method defined on the type <code>dyn Any</code>.\nReturns a reference to the inner value as type <code>dyn T</code>.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the <code>Rc&lt;dyn Any&gt;</code> to a concrete type.\nDowncasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete …\nCreates a new <code>Weak</code> pointer to this allocation.\nCreates a new <code>Weak</code> pointer to this allocation.\nRemoves the specified range from the vector in bulk, …\nRemoves the specified range from the string in bulk, …\nDisposes of a value.\nExecutes the destructor for this type.\nDrops the <code>Rc</code>.\nDrops the <code>Weak</code> pointer.\nDrops the <code>Arc</code>.\nDrops the <code>Weak</code> pointer.\nManually drops the contained value.\nDetermines whether <code>child</code> is a suffix of <code>self</code>.\nCreates an iterator which gives the current iteration …\nInspection and manipulation of the process’s environment.\nInspects an environment variable at compile time.\nPrints to the standard error.\nPrints to the standard error, with a newline.\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nEquality for two <code>Rc</code>s.\nEquality for two <code>Arc</code>s.\nDetermines if the elements of this <code>Iterator</code> are equal to …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nConverts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;E&gt;</code>.\nReturns <code>true</code> if the path points at an existing entity.\nReturns the contained <code>Some</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Ok</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Err</code> value, consuming the <code>self</code> value.\nExtends a collection with the contents of an iterator.\nClones and appends all elements in a slice to the <code>Vec</code>.\nGiven a range <code>src</code>, clones a slice of elements in that …\nCopies elements from <code>src</code> range to the end of the string.\nExtends a collection with exactly one element.\nReserves capacity in a collection for the given number of …\nExtracts the extension (without the leading dot) of …\nCreates an iterator which uses a closure to determine if …\nAn atomic fence.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nLogical “and” with a boolean value.\nPerforms a bitwise “and” operation on the address of …\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nOffsets the pointer’s address by adding <code>val</code> <em>bytes</em>, …\nOffsets the pointer’s address by subtracting <code>val</code> <em>bytes</em>, …\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nLogical “nand” with a boolean value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nLogical “not” with a boolean value.\nLogical “or” with a boolean value.\nPerforms a bitwise “or” operation on the address of …\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nOffsets the pointer’s address by adding <code>val</code> (in units of …\nOffsets the pointer’s address by subtracting <code>val</code> (in …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nLogical “xor” with a boolean value.\nPerforms a bitwise “xor” operation on the address of …\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nExpands to the file name in which it was invoked.\nReturns the final component of the <code>Path</code>, if there is one.\nExtracts the prefix of <code>self.file_name</code>.\nExtracts the stem (non-extension) portion of <code>self.file_name</code>…\nFills <code>this</code> with elements by cloning <code>value</code>, returning a …\nFills <code>this</code> with elements yielded by an iterator until …\nFills <code>this</code> with elements returned by calling a closure …\nCreates an iterator which uses a closure to determine if …\nReturns <code>None</code> if the option is <code>None</code>, otherwise calls …\nCreates an iterator that both filters and maps.\nSearches for an element of an iterator that satisfies a …\nApplies function to the elements of iterator and returns …\nReturns the hash value for the values written so far.\nCreates an iterator that works like map, but flattens …\nCreates an iterator that flattens nested structure.\nConverts from <code>Option&lt;Option&lt;T&gt;&gt;</code> to <code>Option&lt;T&gt;</code>.\nConverts from <code>Result&lt;Result&lt;T, E&gt;, E&gt;</code> to <code>Result&lt;T, E&gt;</code>\nFlushes the file, ensuring that all intermediately …\nUtilities for formatting and printing <code>String</code>s.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFolds every element into an accumulator by applying an …\nCalls a closure on each element of an iterator.\nTakes ownership and “forgets” about the value <strong>without </strong>…\nCreates a <code>String</code> using interpolation of runtime …\nConstructs parameters for the other string-formatting …\nConverts to this type from the input type.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code>.\nConverts a vector into a boxed slice.\nConverts the given <code>String</code> to a boxed <code>str</code> slice that is …\nConverts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nCreates a boxed <code>Path</code> from a reference.\nCreates a boxed <code>Path</code> from a reference.\nCreates a boxed <code>Path</code> from a clone-on-write pointer.\nConverts a <code>&amp;mut [T]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>&amp;mut str</code> into a <code>Box&lt;str&gt;</code>\nConverts an <code>OsString</code> into a Box&lt;OsStr&gt; without copying or …\nConverts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into a Box&lt;OsStr&gt;, by copying …\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nConverts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>\nConverts a <code>str</code> into a box of dyn <code>Error</code>.\nConverts a <code>PathBuf</code> into a Box&lt;Path&gt;.\nConverts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>&amp;mut CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>T</code> into a <code>Box&lt;T&gt;</code>\nConverts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a type of <code>Error</code> into a box of dyn <code>Error</code>.\nConverts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …\nConverts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>String</code> into a box of dyn <code>Error</code>.\nReturns the argument unchanged.\nConverts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nConverts a <code>CStr</code> into a borrowed <code>Cow</code> without copying or …\nConverts the string reference into a <code>Cow::Borrowed</code>.\nConverts a <code>String</code> reference into a <code>Borrowed</code> variant. No …\nCreates a clone-on-write pointer from a reference to …\nCreates a clone-on-write pointer from an owned instance of …\nCreates a clone-on-write pointer from a reference to <code>Path</code>.\nReturns the argument unchanged.\nConverts a <code>CString</code> into an owned <code>Cow</code> without copying or …\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to <code>Vec</code>.\nCreates an <code>Owned</code> variant of <code>Cow</code> from an owned instance of …\nConverts the string reference into a <code>Cow::Borrowed</code>.\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to an …\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a slice.\nConverts a <code>&amp;</code><code>CString</code> into a borrowed <code>Cow</code> without copying or …\nMoves the string into a <code>Cow::Owned</code>.\nConverts a string slice into a <code>Borrowed</code> variant. No heap …\nConverts a <code>String</code> into an <code>Owned</code> variant. No heap …\nConverts NonZero&lt;i8&gt; to NonZero&lt;i16&gt; losslessly.\nConverts NonZero&lt;i8&gt; to NonZero&lt;i64&gt; losslessly.\nConverts NonZero&lt;u16&gt; to NonZero&lt;i64&gt; losslessly.\nConverts NonZero&lt;u32&gt; to NonZero&lt;u128&gt; losslessly.\nConverts NonZero&lt;u32&gt; to NonZero&lt;u64&gt; losslessly.\nConverts NonZero&lt;i16&gt; to NonZero&lt;i32&gt; losslessly.\nConverts NonZero&lt;u16&gt; to NonZero&lt;usize&gt; losslessly.\nConverts NonZero&lt;u16&gt; to NonZero&lt;u128&gt; losslessly.\nConverts NonZero&lt;u16&gt; to NonZero&lt;u64&gt; losslessly.\nConverts NonZero&lt;u16&gt; to NonZero&lt;u32&gt; losslessly.\nConverts NonZero&lt;u8&gt; to NonZero&lt;usize&gt; losslessly.\nConverts NonZero&lt;u8&gt; to NonZero&lt;u128&gt; losslessly.\nConverts NonZero&lt;u8&gt; to NonZero&lt;u64&gt; losslessly.\nConverts NonZero&lt;u8&gt; to NonZero&lt;u32&gt; losslessly.\nConverts NonZero&lt;u8&gt; to NonZero&lt;u16&gt; losslessly.\nConverts NonZero&lt;u16&gt; to NonZero&lt;i32&gt; losslessly.\nConverts NonZero&lt;i16&gt; to NonZero&lt;i64&gt; losslessly.\nReturns the argument unchanged.\nConverts NonZero&lt;u64&gt; to NonZero&lt;u128&gt; losslessly.\nConverts NonZero&lt;u8&gt; to NonZero&lt;isize&gt; losslessly.\nConverts NonZero&lt;u8&gt; to NonZero&lt;i128&gt; losslessly.\nConverts NonZero&lt;u32&gt; to NonZero&lt;i64&gt; losslessly.\nConverts NonZero&lt;i8&gt; to NonZero&lt;isize&gt; losslessly.\nConverts NonZero&lt;i8&gt; to NonZero&lt;i128&gt; losslessly.\nConverts NonZero&lt;i8&gt; to NonZero&lt;i32&gt; losslessly.\nConverts NonZero&lt;u8&gt; to NonZero&lt;i64&gt; losslessly.\nConverts NonZero&lt;u8&gt; to NonZero&lt;i32&gt; losslessly.\nConverts NonZero&lt;u8&gt; to NonZero&lt;i16&gt; losslessly.\nConverts NonZero&lt;i64&gt; to NonZero&lt;i128&gt; losslessly.\nConverts NonZero&lt;i32&gt; to NonZero&lt;i128&gt; losslessly.\nConverts NonZero&lt;i32&gt; to NonZero&lt;i64&gt; losslessly.\nConverts NonZero&lt;u32&gt; to NonZero&lt;i128&gt; losslessly.\nConverts NonZero&lt;i16&gt; to NonZero&lt;isize&gt; losslessly.\nConverts NonZero&lt;u64&gt; to NonZero&lt;i128&gt; losslessly.\nConverts NonZero&lt;i16&gt; to NonZero&lt;i128&gt; losslessly.\nConverts NonZero&lt;u16&gt; to NonZero&lt;i128&gt; losslessly.\nReturns a <code>File</code> that takes ownership of the given file …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>UnsafeCell&lt;T&gt;</code> containing the given value.\nReturns the argument unchanged.\nAllocates a reference-counted slice and moves <code>v</code>’s items …\nConverts an <code>OsString</code> into an Rc&lt;OsStr&gt; by moving the …\nConverts a generic type <code>T</code> into an <code>Rc&lt;T&gt;</code>\nConverts a <code>[T; N]</code> into an <code>Rc&lt;[T]&gt;</code>.\nAllocates a reference-counted slice and fills it by …\nAllocates a reference-counted slice and fills it by …\nAllocates a reference-counted string slice and copies <code>v</code> …\nAllocates a reference-counted string slice and copies <code>v</code> …\nAllocates a reference-counted string slice and copies <code>v</code> …\nMove a boxed object to a new, reference counted, …\nConverts a <code>CString</code> into an Rc&lt;CStr&gt; by moving the <code>CString</code> …\nCreates a reference-counted pointer from a clone-on-write …\nConverts a <code>Path</code> into an <code>Rc</code> by copying the <code>Path</code> data into a …\nConverts a <code>&amp;mut CStr</code> into a <code>Rc&lt;CStr&gt;</code>, by copying the …\nConverts a <code>PathBuf</code> into an Rc&lt;Path&gt; by moving the <code>PathBuf</code> …\nCopies the string into a newly allocated Rc&lt;OsStr&gt;.\nConverts a reference-counted string slice into a byte …\nCopies the string into a newly allocated Rc&lt;OsStr&gt;.\nReturns the argument unchanged.\nConverts a <code>&amp;CStr</code> into a <code>Rc&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>Path</code> into an <code>Rc</code> by copying the <code>Path</code> data into a …\nReturns the argument unchanged.\nConverts a clone-on-write pointer to an owned path.\nConverts a Box&lt;Path&gt; into a <code>PathBuf</code>.\nConverts a borrowed <code>OsStr</code> to a <code>PathBuf</code>.\nConverts an <code>OsString</code> into a <code>PathBuf</code>.\nReturns the argument unchanged.\nConverts a <code>String</code> into a <code>PathBuf</code>\nConverts an <code>OsString</code> into an Arc&lt;OsStr&gt; by moving the …\nCreates an atomically reference-counted pointer from a …\nCopies the string into a newly allocated Arc&lt;OsStr&gt;.\nCopies the string into a newly allocated Arc&lt;OsStr&gt;.\nConverts an atomically reference-counted string slice into …\nAllocates a reference-counted slice and fills it by …\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nAllocates a reference-counted slice and fills it by …\nConverts a <code>[T; N]</code> into an <code>Arc&lt;[T]&gt;</code>.\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nMove a boxed object to a new, reference-counted allocation.\nReturns the argument unchanged.\nAllocates a reference-counted slice and moves <code>v</code>’s items …\nConverts a <code>&amp;mut CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the …\nConverts a <code>PathBuf</code> into an Arc&lt;Path&gt; by moving the <code>PathBuf</code> …\nConverts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …\nConverts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …\nConverts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> …\nConverts a <code>T</code> into an <code>Arc&lt;T&gt;</code>\nReturns the argument unchanged.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nConverts the given <code>String</code> to a vector <code>Vec</code> that holds …\nAllocates a <code>Vec&lt;u8&gt;</code> and fills it with a UTF-8 string.\nAllocates a <code>Vec&lt;T&gt;</code> and moves <code>s</code>’s items into it.\nConverts a boxed slice into a vector by transferring …\nConverts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nTurn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nConverts a <code>CString</code> into a Vec&lt;u8&gt;.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nReturns the argument unchanged.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nConverts a clone-on-write slice into a vector.\nConverts a <code>&amp;mut str</code> into a <code>String</code>.\nConverts a <code>&amp;str</code> into a <code>String</code>.\nAllocates an owned <code>String</code> from a single character.\nReturns the argument unchanged.\nConverts a clone-on-write string to an owned instance of …\nConverts the given boxed <code>str</code> slice to a <code>String</code>. It is …\nConverts a <code>&amp;String</code> into a <code>String</code>.\nReturns the argument unchanged.\nConverts a <code>bool</code> into an <code>AtomicBool</code>.\nConverts a <code>*mut T</code> into an <code>AtomicPtr&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.\nReturns the argument unchanged.\nConverts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>\nMoves <code>val</code> into a new <code>Some</code>.\nReturns the argument unchanged.\nConverts an <code>i8</code> into an <code>AtomicI8</code>.\nReturns the argument unchanged.\nConverts an <code>u8</code> into an <code>AtomicU8</code>.\nReturns the argument unchanged.\nConverts an <code>i16</code> into an <code>AtomicI16</code>.\nReturns the argument unchanged.\nConverts an <code>u16</code> into an <code>AtomicU16</code>.\nReturns the argument unchanged.\nConverts an <code>i32</code> into an <code>AtomicI32</code>.\nReturns the argument unchanged.\nConverts an <code>u32</code> into an <code>AtomicU32</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i64</code> into an <code>AtomicI64</code>.\nReturns the argument unchanged.\nConverts an <code>u64</code> into an <code>AtomicU64</code>.\nReturns the argument unchanged.\nConverts an <code>isize</code> into an <code>AtomicIsize</code>.\nConverts an <code>usize</code> into an <code>AtomicUsize</code>.\nReturns the argument unchanged.\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nConverts an integer from big endian to the target’s …\nCreates a value from an iterator.\nTakes each element in the <code>Iterator</code> and collects it into an …\nTakes each element in the <code>Iterator</code> and collects it into an …\nTakes each element in the <code>Iterator</code>: if it is <code>None</code>, no …\nTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts an integer from little endian to the target’s …\nConverts a reference to a non-zero mutable reference if …\nConverts from <code>&amp;mut T</code> to <code>&amp;mut UnsafeCell&lt;T&gt;</code>.\nGets atomic access to a <code>&amp;mut bool</code>.\nGets atomic access to a pointer.\nGet atomic access to a <code>&amp;mut i8</code>.\nGet atomic access to a <code>&amp;mut u8</code>.\nGet atomic access to a <code>&amp;mut i16</code>.\nGet atomic access to a <code>&amp;mut u16</code>.\nGet atomic access to a <code>&amp;mut i32</code>.\nGet atomic access to a <code>&amp;mut u32</code>.\nGet atomic access to a <code>&amp;mut i64</code>.\nGet atomic access to a <code>&amp;mut u64</code>.\nGet atomic access to a <code>&amp;mut isize</code>.\nGet atomic access to a <code>&amp;mut usize</code>.\nGets atomic access to a <code>&amp;mut [bool]</code> slice.\nGets atomic access to a slice of pointers.\nGet atomic access to a <code>&amp;mut [i8]</code> slice.\nGet atomic access to a <code>&amp;mut [u8]</code> slice.\nGet atomic access to a <code>&amp;mut [i16]</code> slice.\nGet atomic access to a <code>&amp;mut [u16]</code> slice.\nGet atomic access to a <code>&amp;mut [i32]</code> slice.\nGet atomic access to a <code>&amp;mut [u32]</code> slice.\nGet atomic access to a <code>&amp;mut [i64]</code> slice.\nGet atomic access to a <code>&amp;mut [u64]</code> slice.\nGet atomic access to a <code>&amp;mut [isize]</code> slice.\nGet atomic access to a <code>&amp;mut [usize]</code> slice.\nConverts a mutable reference to a non-zero mutable …\nConstructs a box from a <code>NonNull</code> pointer.\nConstructs a box from a <code>NonNull</code> pointer in the given …\nCreates a <code>Vec&lt;T&gt;</code> directly from a <code>NonNull</code> pointer, a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a <code>NonNull</code> pointer, a …\nCreates a new <code>AtomicBool</code> from a pointer.\nCreates a new <code>AtomicPtr</code> from a pointer.\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nConstructs a box from a raw pointer.\nConstructs an <code>Rc&lt;T&gt;</code> from a raw pointer.\nConverts a raw pointer previously created by <code>into_raw</code> back …\nConstructs an <code>Arc&lt;T&gt;</code> from a raw pointer.\nConverts a raw pointer previously created by <code>into_raw</code> back …\nConstructs a box from a raw pointer in the given allocator.\nConstructs an <code>Rc&lt;T, A&gt;</code> from a raw pointer in the provided …\nConverts a raw pointer previously created by <code>into_raw</code> back …\nConstructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.\nConverts a raw pointer previously created by <code>into_raw</code> back …\nCreates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a …\nCreates a new <code>String</code> from a pointer, a length and a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a …\nDecode a UTF-16–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16–encoded slice <code>v</code> into a <code>String</code>, replacing …\nDecode a UTF-16BE–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16BE–encoded slice <code>v</code> into a <code>String</code>, …\nDecode a UTF-16LE–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16LE–encoded slice <code>v</code> into a <code>String</code>, …\nConverts a vector of bytes to a <code>String</code>.\nConverts a slice of bytes to a string, including invalid …\nConverts a <code>Vec&lt;u8&gt;</code> to a <code>String</code>, substituting invalid UTF-8 …\nConverts a vector of bytes to a <code>String</code> without checking …\nFilesystem manipulation operations.\nCreates an iterator which ends after the first <code>None</code>.\nAsynchronous basic functionality.\nTests greater than or equal to (for <code>self</code> and <code>other</code>) and is …\n‘Greater than or equal to’ comparison for two <code>Rc</code>s.\n‘Greater than or equal to’ comparison for two <code>Arc</code>s.\nDetermines if the elements of this <code>Iterator</code> are …\nReturns the contained value as a primitive type.\nGets a mutable pointer to the wrapped value.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference into the given <code>Rc</code>, if there are\nReturns a mutable reference into the given <code>Arc</code>, if there …\nReturns a mutable reference to the underlying <code>bool</code>.\nReturns a mutable reference to the underlying pointer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nGets non-atomic access to a <code>&amp;mut [AtomicBool]</code> slice.\nGets non-atomic access to a <code>&amp;mut [AtomicPtr]</code> slice.\nGet non-atomic access to a <code>&amp;mut [AtomicI8]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU8]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicI16]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU16]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicI32]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU32]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicI64]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU64]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicIsize]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicUsize]</code> slice\nReturns a mutable reference into the given <code>Rc</code>, without any …\nReturns a mutable reference into the given <code>Arc</code>, without …\nInserts <code>value</code> into the option if it is <code>None</code>, then returns …\nInserts the default value into the option if it is <code>None</code>, …\nInserts a value computed from <code>f</code> into the option if it is …\nTests greater than (for <code>self</code> and <code>other</code>) and is used by the …\nGreater-than comparison for two <code>Rc</code>s.\nGreater-than comparison for two <code>Arc</code>s.\nDetermines if the elements of this <code>Iterator</code> are …\nReturns <code>true</code> if the <code>Path</code> has a root.\nGeneric hashing support.\nFeeds this value into the given <code>Hasher</code>.\nFeeds a slice of this type into the given <code>Hasher</code>.\nHints to compiler that affects how code should be emitted …\nThe identity function.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 10 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nReturns the base 2 logarithm of the number, rounded down.\nIncrements the strong reference count on the <code>Rc&lt;T&gt;</code> …\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nIncrements the strong reference count on the <code>Rc&lt;T&gt;</code> …\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nInserts an element at position <code>index</code> within the vector, …\nInserts a character into this <code>String</code> at a byte position.\nInserts <code>value</code> into the option, then returns a mutable …\nInserts a string slice into this <code>String</code> at a byte position.\nDoes something with each element of an iterator, passing …\nCalls a function with a reference to the contained value …\nCalls a function with a reference to the contained value …\nCalls a function with a reference to the contained value …\nCreates a new iterator which places a copy of <code>separator</code> …\nCreates a new iterator which places an item generated by …\nConverts this type into the (usually inferred) input type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>PathBuf</code> into a boxed <code>Path</code>.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConverts the vector into <code>Box&lt;[T]&gt;</code>.\nConverts this <code>String</code> into a Box&lt;str&gt;.\nConverts a <code>String</code> into a byte vector.\nReturns the contained <code>Err</code> value, but never panics.\nTakes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.\nCreates a future from a value.\nConsumes the <code>Box</code>, returning the wrapped value.\nUnwraps the value, consuming the cell.\nReturns the inner value, if the <code>Rc</code> has exactly one strong …\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nExtracts the value from the <code>ManuallyDrop</code> container.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nCreates an iterator from a value.\nCreates a consuming iterator, that is, one that moves each …\nReturns a consuming iterator over the possibly contained …\nReturns a consuming iterator over the possibly contained …\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer and …\nReturns the contained <code>Ok</code> value, but never panics.\nConsumes the <code>PathBuf</code>, yielding its internal <code>OsString</code> …\nExtracts the owned data.\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nConverts a <code>Box&lt;Path&gt;</code> into a <code>PathBuf</code> without copying or …\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nConsumes the <code>Box</code>, returning a wrapped raw pointer.\nConsumes the <code>Rc</code>, returning the wrapped pointer.\nConsumes the <code>Weak&lt;T&gt;</code> and turns it into a raw pointer.\nConsumes the <code>Arc</code>, returning the wrapped pointer.\nConsumes the <code>Weak&lt;T&gt;</code> and turns it into a raw pointer.\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>String</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nConsumes the <code>Box</code>, returning a wrapped raw pointer and the …\nConsumes the <code>Rc</code>, returning the wrapped pointer and …\nConsumes the <code>Weak&lt;T&gt;</code>, returning the wrapped pointer and …\nConsumes the <code>Arc</code>, returning the wrapped pointer and …\nConsumes the <code>Weak&lt;T&gt;</code>, returning the wrapped pointer and …\nReturns <code>true</code> if the inner type is the same as <code>T</code>.\nForwards to the method defined on the type <code>dyn Any</code>.\nForwards to the method defined on the type <code>Any</code>.\nReturns <code>true</code> if the <code>Path</code> is absolute, i.e., if it is …\nReturns true if the data is borrowed, i.e. if <code>to_mut</code> would …\nReturns <code>true</code> if the path exists on disk and is pointing at …\nReturns <code>true</code> if the vector contains no elements.\nReturns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>…\nReturns <code>true</code> if the iterator is empty.\nReturns <code>true</code> if the result is <code>Err</code>.\nReturns <code>true</code> if the result is <code>Err</code> and the value inside of …\nReturns <code>true</code> if the path exists on disk and is pointing at …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nReturns <code>true</code> if the option is a <code>None</code> value.\nReturns <code>true</code> if the option is a <code>None</code> or the value inside …\nReturns <code>true</code> if the result is <code>Ok</code>.\nReturns <code>true</code> if the result is <code>Ok</code> and the value inside of …\nReturns true if the data is owned, i.e. if <code>to_mut</code> would be …\nChecks if the elements of this iterator are partitioned …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nReturns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.\nDetermines if <code>File</code> has an efficient <code>read_vectored</code> …\nReturns <code>true</code> if the <code>Path</code> is relative, i.e., not absolute.\nReturns <code>true</code> if the option is a <code>Some</code> value.\nReturns <code>true</code> if the option is a <code>Some</code> and the value inside …\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted using …\nChecks if the elements of this iterator are sorted using …\nReturns <code>true</code> if the path exists on disk and is pointing at …\nDetermines if <code>File</code> has an efficient <code>write_vectored</code> …\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nReturns the square root of the number, rounded down.\nComposable external iteration.\nProduces an iterator over the path’s components viewed …\nReturns an iterator over the possibly contained value.\nReturns an iterator over the possibly contained value.\nReturns a mutable iterator over the possibly contained …\nReturns a mutable iterator over the possibly contained …\nCreates an owned <code>PathBuf</code> with <code>path</code> adjoined to <code>self</code>.\nConsumes the iterator, returning the last element.\nTests less than or equal to (for <code>self</code> and <code>other</code>) and is …\n‘Less than or equal to’ comparison for two <code>Rc</code>s.\n‘Less than or equal to’ comparison for two <code>Arc</code>s.\nDetermines if the elements of this <code>Iterator</code> are …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nConsumes and leaks the <code>Box</code>, returning a mutable reference, …\nConsumes and leaks the <code>PathBuf</code>, returning a mutable …\nConsumes and leaks the <code>Vec</code>, returning a mutable reference …\nConsumes and leaks the <code>String</code>, returning a mutable …\nReturns the number of elements in the vector, also …\nReturns the length of this <code>String</code>, in bytes, not <code>char</code>s or …\nReturns the exact remaining length of the iterator.\nExpands to the line number on which it was invoked.\nLoads a value from the bool.\nLoads a value from the pointer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nAcquire an exclusive advisory lock on the file. Blocks …\nAcquire a shared advisory lock on the file. Blocks until …\nTests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> …\nLess-than comparison for two <code>Rc</code>s.\nLess-than comparison for two <code>Arc</code>s.\nDetermines if the elements of this <code>Iterator</code> are …\nMakes a mutable reference into the given <code>Rc</code>.\nMakes a mutable reference into the given <code>Arc</code>.\nTakes a closure and creates an iterator which calls that …\nMaps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;U, E&gt;</code> by applying a function …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function …\nReturns the provided default result (if none), or applies …\nReturns the provided default (if <code>Err</code>), or applies a …\nComputes a default function result (if none), or applies a …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>U</code> by applying fallback function …\nCreates an iterator that both yields elements based on a …\nCalls the given function <code>f</code> for each contiguous window of …\nPrimitive traits and types representing basic properties …\nCompares and returns the maximum of two values.\nReturns the maximum element of an iterator.\nReturns the element that gives the maximum value with …\nReturns the element that gives the maximum value from the …\nBasic functions for dealing with memory.\nQueries metadata about the underlying file.\nQueries the file system to get information about a file, …\nCalculates the middle point of <code>self</code> and <code>rhs</code>.\nCalculates the middle point of <code>self</code> and <code>rhs</code>.\nCalculates the middle point of <code>self</code> and <code>rhs</code>.\nCalculates the middle point of <code>self</code> and <code>rhs</code>.\nCalculates the middle point of <code>self</code> and <code>rhs</code>.\nCalculates the middle point of <code>self</code> and <code>rhs</code>.\nCompares and returns the minimum of two values.\nReturns the minimum element of an iterator.\nReturns the element that gives the minimum value with …\nReturns the element that gives the minimum value from the …\nTests for <code>!=</code>. The default implementation is almost always …\nInequality for two <code>Rc</code>s.\nInequality for two <code>Arc</code>s.\nDetermines if the elements of this <code>Iterator</code> are not equal …\nReturns <code>true</code> if dropping values of type <code>T</code> matters.\nAllocates memory on the heap and then places <code>x</code> into it.\nCreates a non-zero if the given value is not zero.\nConstructs a new instance of <code>UnsafeCell</code> which will wrap …\nConstructs a new <code>Rc&lt;T&gt;</code>.\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …\nAllocates an empty <code>PathBuf</code>.\nDirectly wraps a string slice as a <code>Path</code> slice.\nConstructs a new <code>Arc&lt;T&gt;</code>.\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …\nConstructs a new, empty <code>Vec&lt;T&gt;</code>.\nCreates a new empty <code>String</code>.\nCreates a new <code>AtomicBool</code>.\nCreates a new <code>AtomicPtr</code>.\nWrap a value to be manually dropped.\nCreates a new <code>MaybeUninit&lt;T&gt;</code> initialized with the given …\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nConstructs a new <code>Rc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …\nConstructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …\nConstructs a new <code>Rc&lt;T, A&gt;</code> in the given allocator while …\nConstructs a new <code>Arc&lt;T, A&gt;</code> in the given allocator while …\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new <code>Rc</code> in the provided allocator.\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory, …\nConstructs a new <code>Arc&lt;T&gt;</code> in the provided allocator.\nConstructs a new <code>Weak&lt;T, A&gt;</code>, without allocating any …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code>.\nCreates a non-zero without checking whether the value is …\nConstructs a new box with uninitialized contents.\nConstructs a new <code>Rc</code> with uninitialized contents.\nConstructs a new <code>Arc</code> with uninitialized contents.\nConstructs a new box with uninitialized contents in the …\nConstructs a new <code>Rc</code> with uninitialized contents in the …\nConstructs a new <code>Arc</code> with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents.\nConstructs a new reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Rc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Rc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nAdvances the iterator and returns the next value.\nRemoves and returns an element from the end of the …\nAdvances the iterator and returns an array containing the …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nAdditional functionality for numerics.\nReturns the <code>TypeId</code> of the type this generic function has …\nConverts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;T&gt;</code>.\nTransforms the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping …\nTransforms the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping …\nAttempts to open a file in read-only mode.\nAttempts to open a file in read-only mode with buffering.\nOverloadable operators.\nOptional values.\nReturns a new OpenOptions object.\nReturns the option if it contains a value, otherwise …\nReturns <code>res</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …\nReturns the option if it contains a value, otherwise calls …\nCalls <code>op</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …\nComputes the absolute value of self, with overflow …\nComputes the absolute value of self, with overflow …\nComputes the absolute value of self, with overflow …\nComputes the absolute value of self, with overflow …\nComputes the absolute value of self, with overflow …\nComputes the absolute value of self, with overflow …\nNegates self, overflowing if this is equal to the minimum …\nNegates self, overflowing if this is equal to the minimum …\nNegates self, overflowing if this is equal to the minimum …\nNegates self, overflowing if this is equal to the minimum …\nNegates self, overflowing if this is equal to the minimum …\nNegates self, overflowing if this is equal to the minimum …\nPanic support in the standard library.\nPanics the current thread.\nReturns the <code>Path</code> without its final component, if there is …\nThis method returns an ordering between <code>self</code> and <code>other</code> …\nPartial comparison for two <code>Rc</code>s.\nPartial comparison for two <code>Arc</code>s.\nLexicographically compares the <code>PartialOrd</code> elements of this …\nLexicographically compares the elements of this <code>Iterator</code> …\nConsumes an iterator, creating two collections from it.\nReorders the elements of this iterator <em>in-place</em> according …\nCross-platform path manipulation.\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …\nConstructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Rc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …\nConstructs a new <code>Pin&lt;Rc&lt;T&gt;&gt;</code> in the provided allocator. If <code>T</code>…\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator. …\nAttempts to resolve the future to a final value, …\nTruncates <code>self</code> to <code>self.parent</code>.\nRemoves the last element from a vector and returns it, or …\nRemoves the last character from the string buffer and …\nRemoves and returns the last element in a vector if the …\nSearches for an element in an iterator, returning its …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nPrints to the standard output.\nPrints to the standard output, with a newline.\nIterates over the entire iterator, multiplying all the …\nTakes each element in the <code>Iterator</code>: if it is a <code>None</code>, no …\nTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …\nManually manage memory through raw pointers.\nReturns <code>true</code> if the two <code>Rc</code>s point to the same allocation …\nReturns <code>true</code> if the two <code>Weak</code>s point to the same allocation …\nReturns <code>true</code> if the two <code>Arc</code>s point to the same allocation …\nReturns <code>true</code> if the two <code>Weak</code>s point to the same allocation …\nExtends <code>self</code> with <code>path</code>.\nAppends an element to the back of a collection.\nAppends the given <code>char</code> to the end of this <code>String</code>.\nAppends a given string slice onto the end of this <code>String</code>.\nAppends an element if there is sufficient spare capacity, …\nGets a mutable pointer to the wrapped value. The …\nReads some bytes from the file.\nReturns an iterator over the entries within a directory.\nReads a symbolic link, returning the file that the link …\nLike <code>read</code>, except that it reads into a slice of buffers.\nReallocates memory with the global allocator.\nReduces the elements to a single one, by repeatedly …\nRemoves and returns the element at position <code>index</code> within …\nRemoves a <code>char</code> from this <code>String</code> at a byte position and …\nRemove all matches of pattern <code>pat</code> in the <code>String</code>.\nMoves <code>src</code> into the referenced <code>dest</code>, returning the previous …\nReplaces the actual value in the option by the value given …\nRemoves the specified range in the string, and replaces it …\nInvokes <code>reserve</code> on the underlying instance of <code>OsString</code>.\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> bytes more than …\nInvokes <code>reserve_exact</code> on the underlying instance of …\nReserves the minimum capacity for at least <code>additional</code> more …\nReserves the minimum capacity for at least <code>additional</code> …\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nError handling with the <code>Result</code> type.\nRetains only the elements specified by the predicate.\nRetains only the characters specified by the predicate.\nRetains only the elements specified by the predicate, …\nReverses an iterator’s direction.\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the order of bits in the integer. The least …\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nReverses the bit pattern of the integer.\nSearches for an element of an iterator from the back that …\nAn iterator method that reduces the iterator’s elements …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nSearches for an element in an iterator from the right, …\nSaturating absolute value, see <code>i8::saturating_abs</code>.\nSaturating absolute value, see <code>i64::saturating_abs</code>.\nSaturating absolute value, see <code>isize::saturating_abs</code>.\nSaturating absolute value, see <code>i16::saturating_abs</code>.\nSaturating absolute value, see <code>i128::saturating_abs</code>.\nSaturating absolute value, see <code>i32::saturating_abs</code>.\nAdds an unsigned integer to a non-zero value. Return …\nAdds an unsigned integer to a non-zero value. Return …\nAdds an unsigned integer to a non-zero value. Return …\nAdds an unsigned integer to a non-zero value. Return …\nAdds an unsigned integer to a non-zero value. Return …\nAdds an unsigned integer to a non-zero value. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nMultiplies two non-zero integers together. Return …\nSaturating negation. Computes <code>-self</code>, returning …\nSaturating negation. Computes <code>-self</code>, returning …\nSaturating negation. Computes <code>-self</code>, returning …\nSaturating negation. Computes <code>-self</code>, returning …\nSaturating negation. Computes <code>-self</code>, returning …\nSaturating negation. Computes <code>-self</code>, returning …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nRaise non-zero value to an integer power. Return …\nAn iterator adapter which, like <code>fold</code>, holds internal …\nUpdates <code>self.extension</code> to <code>Some(extension)</code> or to <code>None</code> if …\nUpdates <code>self.file_name</code> to <code>file_name</code>.")