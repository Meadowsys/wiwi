searchState.loadedDescShard("wiwi", 0, "wiwi\nChaining APIs for common Rust types\nAn interval tracking clock\nA debounced function; or a function that won’t actually …\nh\nFast and efficient implementation of hex encoding.\nWrapper for initialisation function, initialising it only …\nPrelude module, exporting types from enabled features\nGlobal immutable string pool implementation\nFast and efficient implementation of Z85\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSignin flow functions\nSignup flow functions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCall with data received from the client\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrites the specified amount of bits from the provided u128.\nWrites the specified amount of bits from the provided u16.\nWrites the specified amount of bits from the provided u32.\nWrites the specified amount of bits from the provided u64.\nWrites the specified amount of bits from the provided u8.\nThe preferred chainer of this type\nTrait providing <code>into_chainer</code>, to convert any supported …\nVec type that provides a chaining API.\nBorrow this vector chain mutably as a <code>SliceMutChain</code>.\nBorrow this vector chain immutably as a <code>SliceRefChain</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into its associated chain type\nConverts <code>self</code> into its associated chain type\nUnwraps and retrieves the underlying <code>Vec</code> out.\nWrites <code>true</code> into the output if the vector contains no …\nWrites <code>true</code> into the output if the vector contains no …\nConsumes <code>self</code> and leaks it, returning a mutable reference …\nWrites the number of elements (also known as the length) …\nWrites the number of elements (also known as the length) …\nCreates a new vector chain without allocating any capacity.\nSorts, then dedups, the vector chain.\nCalls the provided closure with the spare capacity of the …\nCreates a new vector, and preallocate some memory.\nAn interval tracking clock. Takes a start time, an end …\nTiming information for one tick\n<code>ClockTimer</code> builder structs\nGets a <code>ClockTimer</code> builder\nReturns if this tick was delayed. This tick is considered …\nGet elapsed time since the start of this timer\nGet end time of this timer\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if this tick is past due. This tick is considered …\nGet remaining runtime of this timer\nConvenience function, equivalent to running a …\nGet start time of this timer\nRuns the next tick and returns timing information for it, …\nGet time of this tick\nGet total runtime of this timer, including elapsed time …\nBuilder for <code>ClockTimer</code>.\nBuilds and returns a <code>ClockTimer</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNew builder. You can also obtain a builder through …\nSets a duration to run this ClockTimer for. Internally, …\nSets the end date/time of the ClockTimer. ClockTimer will …\nSets interval to run at, or the time between ticks.\nSets the start date/time of the ClockTimer, or in other …\nReturns a new function that debounces calls to the passed …\nReturns a new function that debounces calls to the passed …\nReturns a new function that debounces calls to the passed …\nReturns a new function that debounces calls to the passed …\nh\nErrors that can be encountered on decoding data (encoding …\nInvalid character. Characters are only allowed to be in <code>0-9</code>…\nInvalid length. Length is expected to be a multiple of two\nLength of encoding table. Not actually used in …\nEncoding table of lowercased characters. Not actually used …\nEncoding table of uppercased characters. Not actually used …\nDecodes a slice of hex bytes into a byte vector. This …\nEncodes a slice of bytes into a String, using lowercase …\nEncodes a slice of bytes into a String, using uppercase …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ncounting from the most significant to least significant …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllows any wiwi iter to be borrowed as an std iterator. …\nAllows any std iterator to be borrowed as a wiwi iter. …\nOnly an estimation (unreliable for unsafe operations).\nHard bound, unsafe, reliable information for use in unsafe …\nAllows any wiwi iter, or anything capable of converting to …\nAllows any std iterator, or anything capable of converting …\nAn adapter that wraps either a std <code>Iterator</code> or a wiwi <code>Iter</code>…\nOne side of the bound of size hint.\nUnknown bound. Anything goes :p\nBorrow the std iterator as a wiwi iter.\nBorrow the wiwi iter as an std iterator.\nConverts the std iterator into a wiwi iter.\nConverts the wiwi iter into a std iterator.\nConsumes the iter and returns the number of items that …\nReturns default size hint, or <code>(Unknown, Unknown)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code> and returns the underlying iterator.\nTakes every element emitted by the underlying iterator, …\nReturns (lower, upper) bounds. Use this to <code>match</code> on a size …\nSafety\nSafety\nContains previously initialised value\nA lazily initialised data wrapper that initialises itself …\nReturned by <code>LazyWrap::into_inner</code>, containing the …\nValue is not initialised, contains initialisation function.\nRuns initialisation if the value is not initialised yet, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFetch the value if its initialised, or return the …\nEnsures that the value is initialised, then returns the …\nReturns true or false, depending on if the value is …\nCreates a new uninitialised instance that will be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nISO 8601 combined date and time with time zone.\nThe local timescale.\nThe maximum possible <code>DateTime&lt;Utc&gt;</code>.\nThe minimum possible <code>DateTime&lt;Utc&gt;</code>.\nTime duration with nanosecond precision.\nThe Unix Epoch, 1970-01-01 00:00:00 UTC.\nReturns the <code>TimeDelta</code> as an absolute (non-negative) value.\nAdd two <code>TimeDelta</code>s, returning <code>None</code> if overflow occurred.\nAdd a duration in <code>Days</code> to the date part of the <code>DateTime</code>.\nAdds given <code>Months</code> to the current date and time.\nAdds given <code>TimeDelta</code> to the current date and time.\nSubtract two <code>TimeDelta</code>s, returning <code>None</code> if overflow …\nSubtract a duration in <code>Days</code> from the date part of the …\nSubtracts given <code>Months</code> from the current date and time.\nSubtracts given <code>TimeDelta</code> from the current date and time.\nRetrieves the date component with an associated timezone.\nRetrieves the date component.\nMakes a new <code>TimeDelta</code> with the given number of days.\nFix the offset from UTC to its current value, dropping the …\nFormat a <code>TimeDelta</code> using the ISO 8601 format\nFormats the combined date and time per the specified …\nFormats the combined date and time with the specified …\nReturns the argument unchanged.\nConvert this <code>DateTime&lt;Utc&gt;</code> instance into a …\nConvert this <code>DateTime&lt;FixedOffset&gt;</code> instance into a …\nConvert this <code>DateTime&lt;Local&gt;</code> instance into a …\nConvert this <code>DateTime&lt;FixedOffset&gt;</code> instance into a …\nReturns the argument unchanged.\nConvert this <code>DateTime&lt;Local&gt;</code> instance into a <code>DateTime&lt;Utc&gt;</code> …\nConvert this <code>DateTime&lt;Utc&gt;</code> instance into a <code>DateTime&lt;Local&gt;</code> …\nReturns the argument unchanged.\nMakes a new <code>DateTime</code> from a <code>NaiveDateTime</code> in <em>local</em> time …\nMakes a new <code>DateTime</code> from its components: a <code>NaiveDateTime</code> …\nCreates a <code>TimeDelta</code> object from <code>std::time::Duration</code>\nMakes a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nCreates a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nMakes a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nCreates a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nMakes a new <code>DateTime</code> from its components: a <code>NaiveDateTime</code> …\nMakes a new <code>TimeDelta</code> with the given number of hours.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>TimeDelta</code> equals <code>TimeDelta::zero()</code>.\nThe maximum possible <code>TimeDelta</code>: <code>i64::MAX</code> milliseconds.\nMakes a new <code>TimeDelta</code> with the given number of …\nMakes a new <code>TimeDelta</code> with the given number of …\nThe minimum possible <code>TimeDelta</code>: <code>-i64::MAX</code> milliseconds.\nMakes a new <code>TimeDelta</code> with the given number of minutes.\nReturns a view to the naive local datetime.\nReturns a view to the naive UTC datetime.\nMakes a new <code>TimeDelta</code> with the given number of nanoseconds.\nMakes a new <code>TimeDelta</code> with given number of seconds and …\nReturns a <code>DateTime&lt;Local&gt;</code> which corresponds to the current …\nReturns the total number of whole days in the <code>TimeDelta</code>.\nReturns the total number of whole hours in the <code>TimeDelta</code>.\nReturns the total number of whole microseconds in the …\nReturns the total number of whole milliseconds in the …\nReturns the total number of whole minutes in the <code>TimeDelta</code>.\nReturns the total number of whole nanoseconds in the …\nReturns the total number of whole seconds in the <code>TimeDelta</code>.\nReturns the total number of whole weeks in the <code>TimeDelta</code>.\nRetrieves an associated offset from UTC.\nParses a string from a user-specified format into a …\nParses an RFC 2822 date-and-time string into a …\nParses an RFC 3339 date-and-time string into a …\nParses a string from a user-specified format into a …\nCompare two DateTimes based on their true time, ignoring …\nMakes a new <code>TimeDelta</code> with the given number of seconds.\nSubtracts another <code>DateTime</code> from the current date and time. …\nReturns the number of nanoseconds such that …\nRetrieves the time component.\nReturns the number of non-leap seconds since January 1, …\nReturns the number of non-leap-microseconds since January …\nReturns the number of non-leap-milliseconds since January …\nReturns the number of non-leap-nanoseconds since January …\nReturns the number of non-leap-nanoseconds since January …\nReturns the number of microseconds since the last second …\nReturns the number of milliseconds since the last second …\nReturns the number of nanoseconds since the last second …\nRetrieves an associated time zone.\nReturns an RFC 2822 date and time string such as …\nReturns an RFC 3339 and ISO 8601 date and time string such …\nReturn an RFC 3339 and ISO 8601 date and time string with …\nCreates a <code>std::time::Duration</code> object from a <code>TimeDelta</code>.\nTurn this <code>DateTime</code> into a <code>DateTime&lt;Utc&gt;</code>, dropping the …\nReturns a <code>Date</code> which corresponds to the current date.\nMakes a new <code>TimeDelta</code> with the given number of days.\nMakes a new <code>TimeDelta</code> with the given number of hours.\nMakes a new <code>TimeDelta</code> with the given number of …\nMakes a new <code>TimeDelta</code> with the given number of minutes.\nMakes a new <code>TimeDelta</code> with the given number of seconds.\nMakes a new <code>TimeDelta</code> with the given number of weeks.\nMakes a new <code>TimeDelta</code> with the given number of weeks.\nMakes a new <code>DateTime</code> with the day of month (starting from …\nMakes a new <code>DateTime</code> with the day of month (starting from …\nMakes a new <code>DateTime</code> with the hour number changed.\nMakes a new <code>DateTime</code> with the minute number changed.\nMakes a new <code>DateTime</code> with the month number (starting from …\nMakes a new <code>DateTime</code> with the month number (starting from …\nMakes a new <code>DateTime</code> with nanoseconds since the whole …\nMakes a new <code>DateTime</code> with the day of year (starting from …\nMakes a new <code>DateTime</code> with the day of year (starting from …\nMakes a new <code>DateTime</code> with the second number changed.\nChanges the associated time zone. The returned <code>DateTime</code> …\nMakes a new <code>DateTime</code> with the year number changed, while …\nRetrieve the elapsed years from now to the given <code>DateTime</code>.\nA <code>TimeDelta</code> where the stored seconds and nanoseconds are …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe default, global string pool\nTrait implemented by all pools, providing low-level …\nPool’s raw element. Can be anything (that is <code>Sized</code>), but …\nA string, whose contents are stored in a string pool.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBacking pools. Contains the default global pool, as well …\nClones a raw element. The returned raw element should …\nCreates or retrieves a raw element that represents an …\nCreates or retrieves a raw element for a single slice.\nCreates or retrieves a raw element for multiple slices of …\nCreates or retrieves a raw element for a byte vec\nReturns a UTF-8 byte sequence, in a boxed byte array, that …\nReturns a UTF-8 byte sequence, in a byte vec, that the …\nTakes a pool’s raw element and returns the byte slice …\nThe String type\nThe default, global string pool\nTrait implemented by all pools, providing low-level …\nPool’s raw element. Can be anything (that is <code>Sized</code>), but …\nWraps a slice of slices of bytes. This has a simple Hash …\nIterator for <code>SlicesWrap</code> that returns elements in one slice …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClones a raw element. The returned raw element should …\nCreates or retrieves a raw element that represents an …\nCreates or retrieves a raw element for a single slice.\nCreates or retrieves a raw element for multiple slices of …\nCreates or retrieves a raw element for a byte vec\nReturns a UTF-8 byte sequence, in a boxed byte array, that …\nReturns a UTF-8 byte sequence, in a byte vec, that the …\nTakes a pool’s raw element and returns the byte slice …\nJoins the slices in sequence, returning a boxed slice.\nJoins the slices in sequence, returning a vector of bytes.\nA string, whose contents are stored in a string pool.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOne frame of this many bytes (4) from the binary data maps …\nErrors that can be encountered on decoding data (encoding …\nOne frame of data contains characters that are too large …\nInvalid character in input data\nInput data has invalid length\nOne frame of this many bytes (5) from the encoded Z85 data …\nTable to map any byte to Option of a number 0-84.\nLength of the decoding table\nTable to map a number 0-84 to a Z85 character.\nLength of the encoding table (ie. number of different …\nDecodes a slice of of a Z85 string back into the source …\nEncodes a slice of bytes into a Z85 string, adding padding …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")